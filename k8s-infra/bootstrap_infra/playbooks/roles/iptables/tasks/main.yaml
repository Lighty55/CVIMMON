# Flush any existing INPUT rules
- name: Flush existing INPUT rules
  iptables:
    chain: INPUT
    flush: yes
    ip_version: "{{ item }}"
  become: yes
  with_items:
    - ipv4
    - ipv6

# Add 22 port access on mgmt node
- name: Adding SSH IPTABLE rule
  iptables:
    action: insert
    chain: INPUT
    protocol: tcp
    match: tcp
    destination_port: 22
    jump: ACCEPT
    ip_version: "{{ item }}"
  become: yes
  with_items:
    - ipv4
    - ipv6

# Allow established connections, including
# responses to outgoing requests (e.g. NTP, DNS, HTTP)
- name: Add rule to allow established connections
  iptables:
    chain: INPUT
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
    ip_version: "{{ item }}"
  become: yes
  with_items:
    - ipv4
    - ipv6

# Respond to pings from anywhere
- name: Add rule to accept IPv4 pings
  iptables:
    chain: INPUT
    protocol: icmp
    jump: ACCEPT
    ip_version: ipv4
  become: yes

- name: Add rule to accept IPv6 pings
  iptables:
    chain: INPUT
    protocol: ipv6-icmp
    jump: ACCEPT
    ip_version: ipv6
  become: yes

# Drop everything else on br_api
- name: Add rule to drop everything else on br_api
  iptables:
    chain: INPUT
    in_interface: br_api
    jump: DROP
    ip_version: "{{ item }}"
  become: yes
  with_items:
    - ipv4
    - ipv6

# Save the rules to survive a reboot
- name: Save IPTable Rules for IPv4
  shell: /usr/sbin/iptables-save > /etc/sysconfig/iptables

- name: Save IPTable Rules for IPv6
  shell: /usr/sbin/ip6tables-save > /etc/sysconfig/ip6tables


#Configure iptables to start on system boot up
- name: Configure iptables to start on system boot up
  service:
    name: "iptables"
    enabled: yes
    state: started
  failed_when: false
  ignore_errors: true

#Configure iptables to start on system boot up
- name: Restart iptables in loop to see if it comes up
  shell: systemctl start iptables
  register: ipt
  until: ipt.rc == 0
  retries: 5
  delay: 10
