---
- name: Install the required software
  yum:
    name: '{{ item }}'
    state: installed
  with_items:
    - net-tools
    - httpd-tools

- name: Add IP address of all hosts to all hosts
  lineinfile:
     dest: /etc/hosts
     regexp: '.*{{ item }}$'
     line: "{{ hostvars[item].ansible_usehost }} {{ item }}.{{ cvimmon_domain_suffix }} {{ item }}"
     state: present
  when: hostvars[item].ansible_usehost is defined
  with_items: "{{ groups['all-servers']}}"

- name: Check .ssh local directory exists
  stat:
    path: "~/.ssh"
  register: ssh_directory_exists_check

- name: Create ~/.ssh local directory
  file:
    path: "~/.ssh"
    state: directory
    mode: "0700"
  register: ssh_directory_creation
  when: ssh_directory_exists_check is defined and ssh_directory_exists_check.stat.exists == false

- name: Check .ssh key file exists
  stat:
    path: "~/.ssh/{{item}}"
  register: ssh_key_file_exists_check
  with_items:
    - "{{kube_key_filename}}"
    - "{{kube_key_filename}}.pub"

- name: Generate ssh key on local machine
  shell: "ssh-keygen -t rsa -f ~/.ssh/{{kube_key_filename}} -P \"\""
  register: ssh_key_creation
  failed_when: ssh_key_creation.rc != 0
  when: ssh_key_file_exists_check is defined and ssh_key_file_exists_check.results[0].stat.exists == false and ssh_key_file_exists_check.results[1].stat.exists == false

- name: Check .ssh/config file exists
  stat:
    path: "~/.ssh/config"
  register: ssh_config_file_exists_check

- name: Create the ~/.ssh/config file
  file:
    path: "~/.ssh/config"
    state: touch
    mode: "0644"
  register: ssh_config_file_creation
  when: ssh_config_file_exists_check is defined and ssh_config_file_exists_check.stat.exists == false

- name: Add the new ssh key to the ~/.ssh/config file
  lineinfile:
     dest: "~/.ssh/config"
     line: "IdentityFile ~/.ssh/{{kube_key_filename}}"
     state: present
     backup: yes
  register: ssh_config_file_key_addition

- name: Set backup_name fact
  set_fact:
    ssh_known_hosts_file: "{{ lookup('env','HOME') + '/.ssh/known_hosts' }}"

- name: Set backup_name fact
  set_fact:
    ssh_known_hosts: "{{ groups['all-servers'] }}"

- name: For each host, scan for its ssh public key
  shell: "ssh-keyscan {{ item }},`dig +short {{ item }}`"
  with_items: "{{ ssh_known_hosts }}"
  register: ssh_known_host_results
  ignore_errors: yes

- name: Remove the public key in the '{{ ssh_known_hosts_file }}'
  known_hosts:
    name: "{{ item.item }}"
    state: "absent"
    path: "{{ ssh_known_hosts_file }}"
  with_items: "{{ ssh_known_host_results.results }}"

# To copy ssh public key from one remote host to all other hosts
# First copy the key from remote to management node
- name: Copy ssh public key of host to the management node
  fetch:
    src: "~/.ssh/{{kube_key_filename}}.pub"
    dest: "/var/remote_ssh_public_keys/{{ inventory_hostname }}/"
    flat: yes

