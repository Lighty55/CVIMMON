---
- name: "{{ metro_name }}->Check old Value Files exist"
  stat:
    path: "{{ grafana_helm_upgrade_path }}/grafana-values.yaml"
  register: old_cfg

- name: "{{ metro_name }}->Maintain track of Old Value Files"
  become: true
  command: mv {{ grafana_helm_upgrade_path }}/grafana-values.yaml {{ grafana_helm_upgrade_path }}/grafana-values-{{ansible_date_time.epoch}}.yaml
  when: old_cfg.stat.exists

- name: Create tmp directory for CVIM-MON
  file:
    path: "/tmp/cvim_mon"
    state: directory
    owner: root
    group: 500
    mode: "0770"

- name: Start the http data containers
  docker_container:
    name: "cvim-mon-data"
    image: "{{ docker.common.registry }}/{{ docker.cvim_mon.name }}:{{ docker.cvim_mon.image_tag }}"
    state: present
    timeout: 420

- name: Archive the container image
  shell: "docker export cvim-mon-data > /tmp/cvim_mon/cvim-mon.tar"

- name: Extract /tmp/cvim-mon.tar into /tmp/cvim_mon
  unarchive:
    src: /tmp/cvim_mon/cvim-mon.tar
    dest: /tmp/cvim_mon

- name: Stop the http data containers
  docker_container:
    name: "cvim-mon-data"
    image: "{{ docker.common.registry }}/{{ docker.cvim_mon.name }}:{{ docker.cvim_mon.image_tag }}"
    state: absent
    timeout: 420

- name: Copy file with owner and permissions
  copy:
    src: /tmp/cvim_mon/cvim_mon
    dest: /var/lib/

- name: Generate Grafana Configuration
  script: ./generate_grafana_config.py -w "{{ playbook_dir }}/../../../../" -d "{{ playbook_dir }}/roles/grafana/templates/" -n "{{ metro_name }}"

- name: "{{ metro_name }}->Render Grafana-{{ metro_name }} Helm Values File | Helm Values File"
  become: true
  template: { src: "grafana-values.yaml", dest: "{{ directory_matched.stdout }}/{{ grafana_app_directory }}/values.yaml" }

- name: "{{ metro_name }}->Render Grafana-{{ metro_name }} Specific Grafana Helm Values File | Helm Values File for Metro"
  become: true
  template: { src: "grafana-values.yaml", dest: "{{ grafana_helm_upgrade_path }}" }


- name: Copy LDAP config file under stack config
  copy:
    src: "{{ playbook_dir }}/roles/grafana/templates/ldap_config.toml"
    dest: "{{ grafana_values_path }}/grafana/"
  when: LDAP is defined and LDAP == True

- name: Remove ldap config file from template dir
  file:
    path: "{{ playbook_dir }}/roles/grafana/templates/ldap_config.toml"
    state: absent

- name: "Install Grafana-{{ metro_name }} with Helm."
  command: >
    /usr/bin/helm install --name "{{ grafana_deployment_name }}-{{ metro_name }}" --namespace "{{ metro_name }}" "{{ directory_matched.stdout }}"/"{{ grafana_app_directory }}"
  when: "'{{ grafana_deployment_name }}-{{ metro_name }}' not in helm_list_results.stdout"

- name: "{{ metro_name }}->Upgrade Grafana-{{ metro_name }} with Helm."
  command: >
    /usr/bin/helm upgrade -f "{{ grafana_metro_values_path }}" "{{ grafana_deployment_name }}-{{ metro_name }}" "{{ directory_matched.stdout }}"/"{{ grafana_app_directory }}"
  when: "'{{ grafana_deployment_name }}-{{ metro_name }}' in helm_list_results.stdout"

- name: "Check Rollout Status of Grafana-{{ metro_name }} Deployment"
  command: kubectl -n "{{ metro_name }}" rollout status --timeout=300s deployment "{{ grafana_deployment_name }}-{{ metro_name }}"

- name: "Check the status of Grafana-{{ metro_name }} Deployment once rolled-out"
  shell: |
    # Loop until the daemonset exists
    until kubectl -n "{{ metro_name }}" get deployment {{ item }}
    do
      sleep 1
    done
  with_items:
    - "{{ grafana_deployment_name }}-{{ metro_name }}"

- name: "Ensure Grafana-{{ metro_name }} Deployment and pods are up and running."
  changed_when: false
  register: "grafana_state"
  vars:
    nginx_state: { stdout: "{}" }
    pods_query: "items[?kind=='Pod'].status.conditions|[0][?type=='Ready'].status|[0]"
    deployments_query: "items[?kind=='Deployment'].status.conditions|[0][?type=='Available'].status|[0]"
  command: "kubectl get deployments,pods --selector=app=grafana --output=json --namespace={{ metro_name }}"
  until:
      - "grafana_state.stdout|from_json|json_query(pods_query) == 'True'"
      - "grafana_state.stdout|from_json|json_query(deployments_query) == 'True'"
  retries: 50
  delay: 5

- name: Add Grafana Url endpoint to /etc/hosts if not present
  lineinfile:
     dest: /etc/hosts
     regexp: '.*{{ ingress_host_grafana }}$'
     line: "{{ external_loadbalancer_ip }} {{ ingress_host_grafana }}"
     state: present

- name: Register Grafana podname
  shell: "kubectl get pods -o NAME -n {{ metro_name }} | grep grafana | cut -d'/' -f2-"
  register: grafanapod

- name: Check LDAP cert dir exists
  stat:
    path: "{{ grafana_values_path }}/grafana/ldap_cert/"
  register: ldap_cert_dir

- name: Copy LDAP Cert if exists
  shell: "kubectl cp {{ grafana_values_path }}/grafana/ldap_cert/* {{ metro_name }}/{{ item }}:/var/lib/grafana/"
  when: ldap_cert_dir.stat.isdir is defined and ldap_cert_dir.stat.isdir
  with_items: "{{ grafanapod.stdout_lines }}"

- name: Copy cvim mon plugins inside grafana container
  shell: "kubectl cp  /tmp/cvim_mon/var/lib/grafana/plugins/ {{ metro_name }}/{{ item }}:/var/lib/grafana/plugins/"
  with_items: "{{ grafanapod.stdout_lines }}"

- name: Remove Temporary Files
  file:
    state: absent
    path: "/tmp/cvim_mon"

- name: Get Stack Password
  shell: "kubectl get secret grafana-auth-{{ metro_name }} -n {{ metro_name }} -o jsonpath='{.data.admin-password}' | base64 --decode"
  register: grafana_password

- name: Deploy Dashboards
  shell: "python /var/lib/cvim_mon/cvim_mon/cvim_mon.py -n {{ metro_name }} -p {{ grafana_password.stdout }} -g https://{{ ingress_host_grafana }} -a http://prometheus-{{ metro_name }}-alertmanager.{{ metro_name }}.svc.cluster.local:80 -o http://prometheus-{{ metro_name }}-server.{{ metro_name }}.svc.cluster.local:80"
  args:
    chdir: /var/lib/cvim_mon/cvim_mon

- name: Copy builtin dashboard
  copy:
    src: /var/lib/cvim_mon/cvim_mon/grafana/
    dest: "{{ grafana_values_path }}/grafana/builtin_dashboard/"

- name: Create custom dashboard dir
  file:
    path: "{{ grafana_values_path }}/grafana/custom_dashboard/"
    state: directory
    group: root
    owner: root
    mode: 0755

- name: Grafana restart required after plugin install
  shell: 'kubectl exec -it {{item }} -n {{ metro_name }}  -- sh -c "kill 1"'
  with_items: "{{ grafanapod.stdout_lines }}"

- name: "Check the status of Grafana-{{ metro_name }} Deployment after restart"
  shell: |
    # Loop until the daemonset exists
    until kubectl -n "{{ metro_name }}" get deployment {{ item }}
    do
      sleep 1
    done
  with_items:
    - "{{ grafana_deployment_name }}-{{ metro_name }}"
