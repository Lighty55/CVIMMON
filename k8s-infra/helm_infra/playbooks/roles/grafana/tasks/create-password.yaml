---
- name: "CVIMMON-{{ metro_name }}->Check for Existing Passwords File"
  stat:
    path: "{{ password_file_path }}"
  register: file_path

- name: "CVIMMON-{{ metro_name }}->Create a File to write Passwords"
  file:
    path: "{{ password_file_path }}"
    state: touch
  when: file_path.stat.exists == False

- name: "CVIMMON-{{ metro_name }}->Read the passwd file"
  shell: cat {{ password_file_path }}
  register: user_accts

- name: "CVIMMON-{{ metro_name }}->Create a Random Password Using Openssl for Grafana"
  command: openssl rand -base64 32
  register: new_password
  when: user_accts.stdout.find('Grafana-Password-{{ metro_name }}') == -1

- name: "CVIMMON-{{ metro_name }}->Copy Grafana Random Password to a File"
  lineinfile:
    dest: "{{ password_file_path }}"
    line: "Grafana-Password-{{ metro_name }}(Username:admin): {{ new_password.stdout }}"
    insertafter: EOF
  delegate_to: localhost
  when: user_accts.stdout.find('Grafana-Password-{{ metro_name }}') == -1

- name: "CVIMMON-{{ metro_name }}->Fetch Grafana Password"
  shell: "cat {{ password_file_path }} | grep -w 'Grafana-Password-{{ metro_name }}' | awk -F ':' '{print $NF}' | awk '{$1=$1};1'"
  register: existing_password
  when: user_accts.stdout.find('Grafana-Password-{{ metro_name }}') != -1

- set_fact:
    random_password_grafana: "{{ new_password.stdout }}"
  when: user_accts.stdout.find('Grafana-Password-{{ metro_name }}') == -1

- set_fact:
    random_password_grafana: "{{ existing_password.stdout }}"
  when: user_accts.stdout.find('Grafana-Password-{{ metro_name }}') != -1

- name: "CVIMMON-{{ metro_name }}->Get secrets form the namespace and check Grafana Secret exists"
  shell: kubectl get secrets -n {{ metro_name }} | grep grafana-auth-{{ metro_name }} | cat
  register: grafana_secret

- name: "CVIMMON-{{ metro_name }}->Create Grafana Secret if not exists in the namespace"
  command: kubectl create secret generic grafana-auth-{{ metro_name }} --from-literal=admin-user=admin --from-literal=admin-password={{ random_password_grafana }} -n {{ metro_name }}
  when: "'grafana-auth-{{ metro_name }}' not in grafana_secret.stdout"

- name: "CVIMMON-{{ metro_name }}->Replace All Passwords With Kubectl"
  shell: |
     kubectl create secret generic grafana-auth-{{ metro_name }} --from-literal=admin-user=admin --from-literal=admin-password={{ random_password_grafana }} -n {{ metro_name }} -o yaml --dry-run | kubectl replace -f -
  when: "'grafana-auth-{{ metro_name }}' in grafana_secret.stdout"

- name: Register Grafana podname
  shell: "kubectl get pods -o NAME -n {{ metro_name }} | grep grafana | cut -d'/' -f2-"
  register: grafanapod

- name: "CVIMMON-{{ metro_name }}->Change Grafana Password using CLI"
  shell: |
     kubectl get secret grafana-auth-{{ metro_name }} -n {{ metro_name }} -o jsonpath='{.data.admin-password}' | base64 --decode | xargs -I {} kubectl exec -it -n {{ metro_name }} $(kubectl get pods -n {{ metro_name }} | awk '/grafana/ {print $1;exit}') -- grafana-cli --homepath /usr/share/grafana admin reset-admin-password {}
  when: user_accts.stdout.find('Grafana-Password-{{ metro_name }}') != -1 and grafanapod.stdout_lines
