---
- name: "{{ metro_name }}->Check for Existing Passwords File"
  stat:
    path: "{{ password_file_path }}"
  register: file_path

- name: "{{ metro_name }}->Create a File to write Passwords"
  file:
    path: "{{ password_file_path }}"
    state: touch
  when: file_path.stat.exists == False

- name: "{{ metro_name }}->Create a Random Password Using Openssl for Prometheus"
  command: openssl rand -base64 32
  register: random_password_prom

- name: "{{ metro_name }}->read the passwd file"
  shell: cat {{ password_file_path }}
  register: user_accts

- name: "{{ metro_name }}->Copy Prometheus Random Password to a File"
  lineinfile:
    dest: "{{ password_file_path }}"
    line: "Prometheus-Password-{{ metro_name }}(Username:admin): {{ random_password_prom.stdout }}"
    insertafter: EOF
  delegate_to: localhost
  when: user_accts.stdout.find('Prometheus-Password-{{ metro_name }}') == -1

- name: "{{ metro_name }}->Replace a Password in the file created for multiple regenerates"
  replace:
    dest: "{{ password_file_path }}"
    regexp: '^(.*)Prometheus-Password-{{ metro_name }}(.*)$'
    replace: 'Prometheus-Password-{{ metro_name }}(Username:admin): {{ random_password_prom.stdout }}'
    backup: no

- name: "{{ metro_name }}->Create a Encoded Prometheus Secret for using with Kubectl"
  command: htpasswd -bc /tmp/auth admin {{ random_password_prom.stdout }}

- name: "{{ metro_name }}->Get secrets form the namespace and check Prometheus Secret exists"
  shell: kubectl get secrets -n {{ metro_name }} | grep prometheus-auth-{{ metro_name }} | cat
  register: prom_secret

- name: "{{ metro_name }}->Create Prometheus Secret if not exists in the namespace"
  command: kubectl create secret generic prometheus-auth-{{ metro_name }} -n {{ metro_name }} --from-file={{ item }}
  with_items:
    - /tmp/auth
  when: "'prometheus-auth-{{ metro_name }}' not in prom_secret.stdout"

- name: "{{ metro_name }}->Replace All Passwords With Kubectl"
  shell: |
     kubectl create secret generic {{ item.0 }} -n {{ metro_name }} --from-file {{ item.1 }} -o yaml --dry-run | kubectl replace -f -
  with_nested:
    - ['prometheus-auth-{{ metro_name }}']
    - ['/tmp/auth']

- name: "{{ metro_name }}->Delete temporary auth files"
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /tmp/auth

#- name: "Create a Random Password Using Openssl for Elasticsearch"
#  command: openssl rand -base64 32
#  register: random_password_es

#- name: "Copy Random Password to a File"
#  lineinfile:
#    dest: "{{ password_file_path }}"
#    line: "ElasticSearch-Password-{{ metro_name }}(Username:admin):{{ random_password_es.stdout }}"
#    insertafter: EOF
#  delegate_to: localhost

#- name: "Create a Encoded Secret for using with Kubectl"
#  command: htpasswd -bc /tmp/es-auth admin {{ random_password_es.stdout }}

#- name: "Create a Random Password Using Openssl for Kibana"
#  command: openssl rand -base64 32
#  register: random_password_kibana

#- name: "Copy Random Password to a File"
#  lineinfile:
#    dest: "{{ password_file_path }}"
#    line: "Kibana-Password-{{ metro_name }}(Username:admin):{{ random_password_kibana.stdout }}"
#    insertafter: EOF
#  delegate_to: localhost

#- name: "Create a Encoded Secret for using with Kubectl"
#  command: htpasswd -bc /tmp/kibana-auth admin {{ random_password_kibana.stdout }}

#- name: "Get secrets form the namespace and check Prometheus Secret exists"
#  shell: kubectl get secrets -n {{ metro_name }} | grep prometheus-auth-{{ metro_name }} | cat
#  register: prom_secret

#- name: "Create Prometheus Secret if not exists in the namespace"
#  command: kubectl create secret generic prometheus-auth-{{ metro_name }} -n {{ metro_name }} --from-file={{ item }}
#  with_items:
#    - /tmp/prom-auth
#  when: "'prometheus-auth-{{ metro_name }}' not in prom_secret.stdout"

#- name: "Get secrets form the namespace and check ElasticSearch Secret exists"
#  shell: kubectl get secrets -n {{ metro_name }} | grep elasticsearch-auth-{{ metro_name }} | cat
#  register: es_secret
#  check_mode: no

#- name: "Create ElasticSearch Secret if not exists in the namespace"
#  command: kubectl create secret generic elasticsearch-auth-{{ metro_name }} -n {{ metro_name }} --from-file={{ item }}
#  with_items:
#    - /tmp/es-auth
#  when: "'elasticsearch-auth-{{ metro_name }}' not in es_secret.stdout"

#- name: "Get secrets form the namespace and check Kibana Secret exists"
#  shell: kubectl get secrets -n {{ metro_name }} | grep kibana-auth-{{ metro_name }} | cat
#  register: kibana_secret
#  check_mode: no

#- name: "Create Kibana Secret if not exists in the namespace"
#  command: kubectl create secret generic kibana-auth-{{ metro_name }} -n {{ metro_name }} --from-file={{ item }}
#  with_items:
#    - /tmp/kibana-auth
#  when: "'kibana-auth-{{ metro_name }}' not in kibana_secret.stdout"

#- name: "Replace All Passwords With Kubectl"
#  shell: |
#     kubectl create secret generic {{ item.0 }} -n {{ metro_name }} --from-file {{ item.1 }} -o yaml --dry-run | kubectl replace -f -
#  with_nested:
#    - ['prometheus-auth-{{ metro_name }}', 'elasticsearch-auth-{{ metro_name }}', 'kibana-auth-{{ metro_name }}']
#    - ['/tmp/prom-auth', '/tmp/es-auth', '/tmp/kibana-auth']

# - name: "Replace Password With Kubectl"
#   shell: |
#      kubectl create secret generic prometheus-auth-{{ metro_name }} -n {{ metro_name }} --from-file /tmp/prom-auth -o yaml --dry-run | kubectl replace -f -

#- name: "Delete temporary auth files"
#  file:
#    path: "{{ item }}"
#    state: absent
#  with_items:
#    - /tmp/prom-auth
#    - /tmp/es-auth
#    - /tmp/kibana-auth
