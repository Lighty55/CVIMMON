---
- name: Generate Grafana Configuration
  shell: python "{{ playbook_dir }}/roles/grafana/files/generate_grafana_config.py" -w "{{ playbook_dir }}/../../../../" -d "{{ playbook_dir }}/roles/grafana-cvimmon-k8s/templates/" --monitor
  when: CVIMMONHA_CLUSTER_MONITOR.ldap is defined

- name: "CVIMMON-Kubernetes-Monitor->Render Grafana-k8s-cluster-monitor Helm Values File | Helm Values File"
  become: true
  template: { src: "grafana-values.yaml", dest: "{{ directory_matched.stdout }}/{{ grafana_app_directory }}/values.yaml" }

- name: "CVIMMON-Kubernetes-Monitor->Render Grafana-k8s-cluster-monitor Specific Grafana Helm Values File | Helm Values File for Metro"
  become: true
  template: { src: "grafana-values.yaml", dest: "{{ grafana_helm_upgrade_path }}/grafana-values.yaml" }

- name: Copy LDAP config file under stack config
  copy:
    src: "{{ playbook_dir }}/roles/grafana-cvimmon-k8s/templates/ldap_config.toml"
    dest: "{{ grafana_values_path }}/grafana/"
  when: CVIMMONHA_CLUSTER_MONITOR.ldap is defined

- name: Remove ldap config file from template dir
  file:
    path: "{{ playbook_dir }}/roles/grafana-cvimmon-k8s/templates/ldap_config.toml"
    state: absent

- name: "Install Grafana-k8s-cluster-monitor with Helm."
  command: >
    /usr/bin/helm install --name "{{ grafana_deployment_name }}" --namespace "{{ grafana_namespace }}" "{{ directory_matched.stdout }}"/"{{ grafana_app_directory }}"
  when: "'{{ grafana_deployment_name }}' not in helm_list_results.stdout"

- name: "Check Rollout Status of Grafana-k8s-cluster-monitor Deployment"
  command: kubectl -n "{{ grafana_namespace }}" rollout status --timeout=300s deployment "{{ grafana_deployment_name }}"

- name: "Check the status of Grafana-k8s-cluster-monitor Deployment once rolled-out"
  shell: |
    # Loop until the daemonset exists
    until kubectl -n "{{ grafana_namespace }}" get deployment {{ item }}
    do
      sleep 1
    done
  with_items:
    - "{{ grafana_deployment_name }}"

- name: "Ensure Grafana-k8s-cluster-monitor Deployment and pods are up and running."
  changed_when: false
  register: "grafana_state"
  vars:
    nginx_state: { stdout: "{}" }
    pods_query: "items[?kind=='Pod'].status.conditions|[0][?type=='Ready'].status|[0]"
    deployments_query: "items[?kind=='Deployment'].status.conditions|[0][?type=='Available'].status|[0]"
  command: "kubectl get deployments,pods --selector=app=grafana --output=json --namespace={{ grafana_namespace }}"
  until:
      - "grafana_state.stdout|from_json|json_query(pods_query) == 'True'"
      - "grafana_state.stdout|from_json|json_query(deployments_query) == 'True'"
  retries: 50
  delay: 5

- name: Register Grafana podname
  shell: "kubectl get pods -o NAME -n {{ grafana_namespace }} | grep grafana | cut -d'/' -f2-"
  register: grafanapod

- name: Check LDAP cert dir exists
  stat:
    path: "{{ grafana_values_path }}/grafana/ldap_cert/"
  register: ldap_cert_dir

- name: Copy LDAP Cert if exists
  shell: "kubectl cp {{ grafana_values_path }}/grafana/ldap_cert/* {{ grafana_namespace }}/{{ item }}:/var/lib/grafana/"
  with_items: "{{ grafanapod.stdout_lines }}"
  when: ldap_cert_dir.stat.isdir is defined and ldap_cert_dir.stat.isdir

- include: grafana-set-dashboard.yaml
