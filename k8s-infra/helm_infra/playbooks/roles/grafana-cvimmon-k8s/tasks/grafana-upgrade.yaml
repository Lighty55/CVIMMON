---
- name: "{{ metro_name }}->Checking for Required Files and Folders"
  stat:
    path: "{{item}}"
  register: folder_stats
  with_items:
    - ["{{ conf_bin_path }}","{{ grafana_values_path }}","{{ grafana_helm_upgrade_path }}"]

- name: "{{ metro_name }}->Creating Required Folders if not Exists"
  file:
    path: "{{item.item}}"
    state: directory
    mode: 0755
    group: root
    owner: root
  when: item.stat.exists == false
  with_items:
  - "{{folder_stats.results}}"

- name: "{{ metro_name }}->Render Grafana-{{ metro_name }} Helm Values File | Helm Values File"
  become: true
  template: { src: "grafana-values.yaml", dest: "{{ directory_matched.stdout }}/{{ grafana_app_directory }}/values.yaml" }

- name: "{{ metro_name }}->Maintain track of Old Value Files"
  become: true
  command: mv {{ grafana_helm_upgrade_path }}/grafana-values.yaml {{ grafana_helm_upgrade_path }}/grafana-values-{{ansible_date_time.epoch}}.yaml

- name: "{{ metro_name }}->Render Grafana-{{ metro_name }} Specific Prometheus Helm Values File | Helm Values File for Metro"
  become: true
  template: { src: "grafana-values.yaml", dest: "{{ grafana_helm_upgrade_path }}" }

- name: "{{ metro_name }}->Upgrade Grafana-{{ metro_name }} with Helm."
  command: >
    /usr/bin/helm upgrade -f "{{ grafana_metro_values_path }}" grafana-"{{ metro_name }}" "{{ directory_matched.stdout }}"/"{{ grafana_app_directory }}"

- name: "{{ metro_name }}->Check Rollout Status of Grafana-{{ metro_name }} Deployment"
  command: kubectl -n "{{ metro_name }}" rollout status --timeout=300s deployment "{{ grafana_deployment_name }}-{{ metro_name }}"

- name: "{{ metro_name }}->Check the status of Grafana-{{ metro_name }} Deployment once rolled-out"
  shell: |
    # Loop until the daemonset exists
    until kubectl -n "{{ metro_name }}" get deployment {{ item }}
    do
      sleep 1
    done
  with_items:
    - "{{ grafana_deployment_name }}-{{ metro_name }}"

- name: "{{ metro_name }}->Ensure Grafana-{{ metro_name }} Deployment and pods are up and running."
  changed_when: false
  register: "grafana_state"
  vars:
    nginx_state: { stdout: "{}" }
    pods_query: "items[?kind=='Pod'].status.conditions|[0][?type=='Ready'].status|[0]"
    deployments_query: "items[?kind=='Deployment'].status.conditions|[0][?type=='Available'].status|[0]"
  command: "kubectl get deployments,pods --selector=app=grafana --output=json --namespace={{ metro_name }}"
  until:
      - "grafana_state.stdout|from_json|json_query(pods_query) == 'True'"
      - "grafana_state.stdout|from_json|json_query(deployments_query) == 'True'"
  retries: 50
  delay: 5
