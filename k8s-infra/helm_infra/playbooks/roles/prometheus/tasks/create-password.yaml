---
- name: "CVIMMON-{{ metro_name }}->Check for Existing Passwords File"
  stat:
    path: "{{ password_file_path }}"
  register: file_path

- name: "CVIMMON-{{ metro_name }}->Create a File to write Passwords"
  file:
    path: "{{ password_file_path }}"
    state: touch
  when: file_path.stat.exists == False

- name: "CVIMMON-{{ metro_name }}->Read the passwd file"
  shell: cat {{ password_file_path }}
  register: user_accts

- name: "CVIMMON-{{ metro_name }}->Create a Random Password Using Openssl for Prometheus"
  command: openssl rand -base64 32
  register: new_password
  when: user_accts.stdout.find('Prometheus-Password-{{ metro_name }}') == -1

- name: "CVIMMON-{{ metro_name }}->Copy Prometheus Random Password to a File"
  lineinfile:
    dest: "{{ password_file_path }}"
    line: "Prometheus-Password-{{ metro_name }}(Username:admin): {{ new_password.stdout }}"
    insertafter: EOF
  delegate_to: localhost
  when: user_accts.stdout.find('Prometheus-Password-{{ metro_name }}') == -1

- name: "CVIMMON-{{ metro_name }}->Fetch Prometheus Password"
  shell: "cat {{ password_file_path }} | grep -w 'Prometheus-Password-{{ metro_name }}' | awk -F ':' '{print $NF}' | awk '{$1=$1};1'"
  register: existing_password
  when: user_accts.stdout.find('Prometheus-Password-{{ metro_name }}') != -1

- set_fact:
    random_password_prom: "{{ new_password.stdout }}"
  when: user_accts.stdout.find('Prometheus-Password-{{ metro_name }}') == -1

- set_fact:
    random_password_prom: "{{ existing_password.stdout }}"
  when: user_accts.stdout.find('Prometheus-Password-{{ metro_name }}') != -1

- name: "CVIMMON-{{ metro_name }}->Create a Encoded Prometheus Secret for using with Kubectl"
  command: htpasswd -bc /tmp/auth admin {{ random_password_prom }}

- name: "CVIMMON-{{ metro_name }}->Get secrets form the namespace and check Prometheus Secret exists"
  shell: kubectl get secrets -n {{ metro_name }} | grep prometheus-auth-{{ metro_name }} | cat
  register: prom_secret

- name: "CVIMMON-{{ metro_name }}->Create Prometheus Secret if not exists in the namespace"
  command: kubectl create secret generic prometheus-auth-{{ metro_name}} -n {{ metro_name }} --from-file={{ item }}
  with_items:
    - /tmp/auth
  when: "'prometheus-auth-{{ metro_name}}' not in prom_secret.stdout"

- name: "CVIMMON-{{ metro_name }}->Replace All Passwords With Kubectl"
  shell: |
     kubectl create secret generic {{ item.0 }} -n {{ metro_name }} --from-file {{ item.1 }} -o yaml --dry-run | kubectl replace -f -
  with_nested:
    - ['prometheus-auth-{{ metro_name }}']
    - ['/tmp/auth']
  when: "'prometheus-auth-{{ metro_name}}' in prom_secret.stdout"

- name: "CVIMMON-{{ metro_name }}->Delete temporary auth files"
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /tmp/auth
