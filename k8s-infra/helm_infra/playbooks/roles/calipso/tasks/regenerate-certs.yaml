- name: "Regen certs | Check for any historic cert/key files in the path"
  stat:
    path: "{{ item }}"
  register: fpath
  with_items:
    - "{{ calipso_mongo_key_out_path }}"
    - "{{ calipso_mongo_cert_out_path }}"
    - "{{ calipso_api_key_out_path }}"
    - "{{ calipso_api_cert_out_path }}"

- name: "Regen certs | Delete any past cert files if path exists"
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ calipso_mongo_key_out_path }}"
    - "{{ calipso_mongo_cert_out_path }}"
    - "{{ calipso_api_key_out_path }}"
    - "{{ calipso_api_cert_out_path }}"

- name: "Regen certs | Get secrets form the namespace and check calipso_mongo secret exists"
  shell: kubectl get secrets -n {{ calipso_namespace }} | grep calipso-mongo-cert | cat
  register: mongo_secret

- name: "Regen certs | Get secrets form the namespace and check if calipso_api secret exists"
  shell: kubectl get secrets -n {{ calipso_namespace }} | grep calipso-api-cert | cat
  register: api_secret

- name: "Regen certs | Create self-signed certs with OpenSSL for calipso_mongo"
  become: yes
  command: >
    openssl req -x509 -nodes -days {{ validity_days }}
    -newkey rsa:{{ bits }}
    -keyout {{ calipso_mongo_key_out_path }}
    -out {{ calipso_mongo_cert_out_path }}
    -subj "/CN=calipso-mongo-cluster-monitor.{{ cvimmon_domain_suffix }}/O=calipso-mongo-cluster-monitor.{{ cvimmon_domain_suffix }}"

- name: "Regen certs | Create self-signed certs with OpenSSL for calipso_api"
  become: yes
  command: >
    openssl req -x509 -nodes -days {{ validity_days }}
    -newkey rsa:{{ bits }}
    -keyout {{ calipso_api_key_out_path }}
    -out {{ calipso_api_cert_out_path }}
    -subj "/CN=calipso-api-cluster-monitor.{{ cvimmon_domain_suffix }}/O=calipso-api-cluster-monitor.{{ cvimmon_domain_suffix }}"

- name: "Regen certs | Create Kubernetes TLS secret for calipso_mongo"
  command: kubectl create secret tls calipso-mongo-cert -n {{ calipso_namespace }} --key {{ item.0 }} --cert {{ item.1 }}
  with_nested:
    - ['{{ calipso_mongo_key_out_path }}']
    - ['{{ calipso_mongo_cert_out_path }}']
  when: "'calipso-mongo-cert' not in mongo_secret.stdout"

- name: "Regen certs | Create Kubernetes TLS secret for calipso_api"
  command: kubectl create secret tls calipso-api-cert -n {{ calipso_namespace }} --key {{ item.0 }} --cert {{ item.1 }}
  with_nested:
    - ['{{ calipso_api_key_out_path }}']
    - ['{{ calipso_api_cert_out_path }}']
  when: "'calipso-api-cert' not in api_secret.stdout"

- name: "Regen certs | Replace calipso_mongo ingress certs with kubectl"
  shell: |
     kubectl create secret tls {{ item.0 }} -n {{ calipso_namespace }} --key {{ item.1 }} --cert {{ item.2 }} -o yaml --dry-run | kubectl replace -f -
  with_nested:
    - ['calipso-mongo-cert']
    - ['{{ calipso_mongo_key_out_path }}']
    - ['{{ calipso_mongo_cert_out_path }}']

- name: "Regen certs | Replace calipso_api ingress certs with kubectl"
  shell: |
     kubectl create secret tls {{ item.0 }} -n {{ calipso_namespace }} --key {{ item.1 }} --cert {{ item.2 }} -o yaml --dry-run | kubectl replace -f -
  with_nested:
    - ['calipso-api-cert']
    - ['{{ calipso_api_key_out_path }}']
    - ['{{ calipso_api_cert_out_path }}']

- name: "Regen certs | Delete all sensitive cert files in the path"
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ calipso_mongo_key_out_path }}"
    - "{{ calipso_mongo_cert_out_path }}"
    - "{{ calipso_api_key_out_path }}"
    - "{{ calipso_api_cert_out_path }}"


- include: get-secrets.yaml

- include: render-values.yaml

- name: "Regen certs | Upgrade calipso-k8s-cluster-monitor with helm"
  command: >
    /usr/bin/helm upgrade "{{ calipso_deployment_name }}" --namespace "{{ calipso_namespace }}" "{{ directory_matched.stdout }}"/"{{ calipso_app_directory }}"