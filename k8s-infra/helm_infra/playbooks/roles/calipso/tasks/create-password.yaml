- name: "Create pwd | Check for Existing Passwords File"
  stat:
    path: "{{ password_file_path }}"
  register: file_path

- name: "Create pwd | Create a File to write Passwords"
  file:
    path: "{{ password_file_path }}"
    state: touch
  when: file_path.stat.exists == False

- name: "Create pwd | Read the passwd file"
  shell: cat {{ password_file_path }}
  register: user_accts

- name: "Create pwd | Generate a password for calipso-mongo"
  command: openssl rand -hex 32
  register: mongo_password_gen
  when: user_accts.stdout.find('Calipso_Mongo-Password-{{ calipso_namespace }}') == -1

- name: "Create pwd | Generate a password for calipso-api"
  command: openssl rand -hex 32
  register: api_password_gen
  when: user_accts.stdout.find('Calipso_API-Password-{{ calipso_namespace }}') == -1

- name: "Create pwd | Copy calipso-mongo password to the secrets file"
  lineinfile:
    dest: "{{ password_file_path }}"
    line: "Calipso_Mongo-Password-{{ calipso_namespace }}(Username:{{ calipso_mongo_user }}): {{ mongo_password_gen.stdout }}"
    insertafter: EOF
  delegate_to: localhost
  when: user_accts.stdout.find('Calipso_Mongo-Password-{{ calipso_namespace }}') == -1

- name: "Create pwd | Copy calipso-api password to the secrets file"
  lineinfile:
    dest: "{{ password_file_path }}"
    line: "Calipso_API-Password-{{ calipso_namespace }}(Username:{{ calipso_api_user }}): {{ api_password_gen.stdout }}"
    insertafter: EOF
  delegate_to: localhost
  when: user_accts.stdout.find('Calipso_API-Password-{{ calipso_namespace }}') == -1

# Update mongo password and secret
- name: "Create pwd | Fetch Calipso mongo Password"
  shell: "cat {{ password_file_path }} | grep Calipso_Mongo-Password-{{ calipso_namespace }} | awk -F ':' '{print $NF}' | awk '{$1=$1};1'"
  register: existing_mongo_password
  when: user_accts.stdout.find('Calipso_Mongo-Password-{{ calipso_namespace }}') != -1

- set_fact:
    mongo_password: "{{ mongo_password_gen.stdout }}"
  when: user_accts.stdout.find('Calipso_Mongo-Password-{{ calipso_namespace }}') == -1

- set_fact:
    mongo_password: "{{ existing_mongo_password.stdout }}"
  when: user_accts.stdout.find('Calipso_Mongo-Password-{{ calipso_namespace }}') != -1

- name: "Create pwd | Get secrets form the namespace and check whether Calipso mongo secret exists"
  shell: kubectl get secrets -n {{ calipso_namespace }} | grep {{ ingress_authsecret_calipso_mongo }} | cat
  register: mongo_secret

- name: "Create pwd | Create Calipso mongo secret if not exists in the namespace"
  command: kubectl create secret generic {{ ingress_authsecret_calipso_mongo }} --from-literal=admin-user={{ calipso_mongo_user }} --from-literal=admin-password={{ mongo_password }} -n {{ calipso_namespace }}
  when: "'{{ ingress_authsecret_calipso_mongo }}' not in mongo_secret.stdout"

- name: "Create pwd | Replace Calipso mongo password with kubectl"
  shell: |
     kubectl create secret generic {{ ingress_authsecret_calipso_mongo }} --from-literal=admin-user={{ calipso_mongo_user }} --from-literal=admin-password={{ mongo_password }} -n {{ calipso_namespace }} -o yaml --dry-run | kubectl replace -f -
  when: "'{{ ingress_authsecret_calipso_mongo }}' in mongo_secret.stdout"

# Update API password and secret
- name: "Create pwd | Fetch Calipso API Password"
  shell: "cat {{ password_file_path }} | grep Calipso_API-Password-{{ calipso_namespace }} | awk -F ':' '{print $NF}' | awk '{$1=$1};1'"
  register: existing_api_password
  when: user_accts.stdout.find('Calipso_API-Password-{{ calipso_namespace }}') != -1

- set_fact:
    api_password: "{{ api_password_gen.stdout }}"
  when: user_accts.stdout.find('Calipso_API-Password-{{ calipso_namespace }}') == -1

- set_fact:
    api_password: "{{ existing_api_password.stdout }}"
  when: user_accts.stdout.find('Calipso_API-Password-{{ calipso_namespace }}') != -1

- name: "Create pwd | Get secrets form the namespace and check whether Calipso mongo secret exists"
  shell: kubectl get secrets -n {{ calipso_namespace }} | grep {{ ingress_authsecret_calipso_api }} | cat
  register: api_secret

- name: "Create pwd | Create Calipso API secret if not exists in the namespace"
  command: kubectl create secret generic {{ ingress_authsecret_calipso_api }} --from-literal=admin-user={{ calipso_api_user }} --from-literal=admin-password={{ api_password }} -n {{ calipso_namespace }}
  when: "'{{ ingress_authsecret_calipso_api }}' not in api_secret.stdout"

- name: "Create pwd | Replace Calipso API password with kubectl"
  shell: |
     kubectl create secret generic {{ ingress_authsecret_calipso_api }} --from-literal=admin-user={{ calipso_api_user }} --from-literal=admin-password={{ api_password }} -n {{ calipso_namespace }} -o yaml --dry-run | kubectl replace -f -
  when: "'{{ ingress_authsecret_calipso_api }}' in api_secret.stdout"