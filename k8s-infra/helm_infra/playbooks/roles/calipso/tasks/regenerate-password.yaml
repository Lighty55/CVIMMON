# Get old secrets
- include: get-secrets.yaml

- set_fact:
    mongo_password_old: "{{ mongo_password }}"
    api_password_old: "{{ api_password }}"


# Update mongo password and secret
- name: "Regen pwd | Create a random password for calipso_mongo"
  command: openssl rand -hex 32
  register: mongo_password_gen

- set_fact:
    mongo_password: "{{ mongo_password_gen.stdout }}"

- name: "Regen pwd | Get secrets form the namespace and check if calipso_mongo secret exists"
  shell: kubectl get secrets -n {{ calipso_namespace }} | grep {{ ingress_authsecret_calipso_mongo }} | cat
  register: mongo_secret

- name: "Regen pwd | Create calipso_mongo secret if not exists in the namespace"
  command: kubectl create secret generic {{ ingress_authsecret_calipso_mongo }} --from-literal=admin-user={{ calipso_mongo_user }} --from-literal=admin-password={{ mongo_password }} -n {{ calipso_namespace }}
  when: "'{{ ingress_authsecret_calipso_mongo }}' not in mongo_secret.stdout"

- name: "Regen pwd | Replace calipso_mongo password with kubectl"
  shell: |
     kubectl create secret generic {{ ingress_authsecret_calipso_mongo }} --from-literal=admin-user={{ calipso_mongo_user }} --from-literal=admin-password={{ mongo_password }} -n {{ calipso_namespace }} -o yaml --dry-run | kubectl replace -f -
  when: "'{{ ingress_authsecret_calipso_mongo }}' in mongo_secret.stdout"

- name: "Deploy | Register calipso-mongo pod name"
  shell: "kubectl get pods -n {{ calipso_namespace }} | grep calipso-mongo | awk '{ print $1 }'"
  register: calipso_mongo_pod

- name: "Regen pwd | Replace db password in mongo container"
  shell: |
     kubectl exec {{ calipso_mongo_pod.stdout }} --namespace={{ calipso_namespace }} -- bash -c "CALIPSO_MONGO_SERVICE_NEW_PWD={{ mongo_password }} CALIPSO_MONGO_SERVICE_OLD_PWD={{ mongo_password_old }} python /set_new_password.py"

- name: "Regen pwd | Save the calipso_mongo password in secrets file"
  lineinfile:
    dest: "{{ password_file_path }}"
    regexp: '^Calipso_Mongo-Password-{{ calipso_namespace }}'
    line: 'Calipso_Mongo-Password-{{ calipso_namespace }}(Username:{{ calipso_mongo_user }}): {{ mongo_password }}'
    create: yes


# Update API password and secret
- name: "Regen pwd | Create a random password for calipso_api"
  command: openssl rand -hex 32
  register: api_password_gen

- set_fact:
    api_password: "{{ api_password_gen.stdout }}"

- name: "Regen pwd | Get secrets form the namespace and check if calipso_api secret exists"
  shell: kubectl get secrets -n {{ calipso_namespace }} | grep {{ ingress_authsecret_calipso_api }} | cat
  register: api_secret

- name: "Regen pwd | Create calipso_api secret if not exists in the namespace"
  command: kubectl create secret generic {{ ingress_authsecret_calipso_api }} --from-literal=admin-user={{ calipso_api_user }} --from-literal=admin-password={{ api_password }} -n {{ calipso_namespace }}
  when: "'{{ ingress_authsecret_calipso_api }}' not in api_secret.stdout"

- name: "Regen pwd | Replace calipso_api password with kubectl"
  shell: |
     kubectl create secret generic {{ ingress_authsecret_calipso_api }} --from-literal=admin-user={{ calipso_api_user }} --from-literal=admin-password={{ api_password }} -n {{ calipso_namespace }} -o yaml --dry-run | kubectl replace -f -
  when: "'{{ ingress_authsecret_calipso_api }}' in api_secret.stdout"

- name: "Regen pwd | Save the calipso_api password in secrets file"
  lineinfile:
    dest: "{{ password_file_path }}"
    regexp: '^Calipso_API-Password-{{ calipso_namespace }}\(Username:{{ calipso_api_user }}\)'
    line: 'Calipso_API-Password-{{ calipso_namespace }}(Username:{{ calipso_api_user }}): {{ api_password }}'
    create: yes

# Render values.yaml with new passwords
- include: render-values.yaml

- name: "Regen pwd | Upgrade calipso-k8s-cluster-monitor with helm"
  command: >
    /usr/bin/helm upgrade "{{ calipso_deployment_name }}" --namespace "{{ calipso_namespace }}" "{{ directory_matched.stdout }}"/"{{ calipso_app_directory }}"
