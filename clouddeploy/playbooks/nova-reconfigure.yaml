- name: Update Nova Common Containerized service.
  hosts: host_common
  max_fail_percentage: 0
  user: "{{ remote_user }}"
  become: "{{ sudo_required }}"
  roles:
    - { role: "nova-common", tags: [ "base", "nova-common" ] }
  serial: "30%"

- name: Update Nova Conductor Containerized service.
  hosts: nova_conductor_all
  max_fail_percentage: 0
  user: "{{ remote_user }}"
  become: "{{ sudo_required }}"
  roles:
    - { role: "nova-conductor", tags: [ "base", "nova-conductor" ] }
  serial: "30%"

- name: Update Nova Libvirt Containerized service.
  hosts: nova_libvirt_all
  max_fail_percentage: 0
  user: "{{ remote_user }}"
  become: "{{ sudo_required }}"
  roles:
    - { role: "nova-libvirt", tags: [ "base", "nova-libvirt" ] }
  serial: "30%"

- name: Update Nova API Containerized service.
  hosts: nova_api_all
  max_fail_percentage: 0
  user: "{{ remote_user }}"
  become: "{{ sudo_required }}"
  roles:
    - { role: "nova-api", tags: [ "base", "nova-api" ] }
  serial: "30%"

- name: Update Nova Placement API Containerized service.
  hosts: nova_api_all
  max_fail_percentage: 0
  user: "{{ remote_user }}"
  become: "{{ sudo_required }}"
  roles:
    - { role: "nova-placement-api", tags: [ "base", "nova-placement-api" ] }
  serial: "30%"

- name: Update Nova ConsoleAuth Containerized service.
  hosts: nova_consoleauth_all
  max_fail_percentage: 0
  user: "{{ remote_user }}"
  become: "{{ sudo_required }}"
  roles:
    - { role: "nova-consoleauth", tags: [ "base", "nova-consoleauth" ] }
  serial: "30%"

- name: Update Nova NOVNCproxy Containerized service.
  hosts: nova_novncproxy_all
  max_fail_percentage: 0
  user: "{{ remote_user }}"
  become: "{{ sudo_required }}"
  roles:
    - { role: "nova-novncproxy", tags: [ "base", "nova-novncproxy" ] }
  serial: "30%"

- name: Update Nova Scheduler Containerized service.
  hosts: nova_scheduler_all
  max_fail_percentage: 0
  user: "{{ remote_user }}"
  become: "{{ sudo_required }}"
  roles:
    - { role: "nova-scheduler", tags: [ "base", "nova-scheduler" ] }
  serial: "30%"

- name: Update Nova Compute Containerized service.
  hosts: nova_compute_all
  max_fail_percentage: 0
  user: "{{ remote_user }}"
  become: "{{ sudo_required }}"
  roles:
    - { role: "nova-compute", tags: [ "base", "nova-compute", "nova-compute-ovs" ] }
  serial: "30%"

- name: Update Nova SSH Containerized service.
  hosts: nova_ssh_all
  max_fail_percentage: 0
  user: "{{ remote_user }}"
  become: "{{ sudo_required }}"
  roles:
    - { role: "nova-ssh", tags: [ "base", "nova-ssh" ] }
  serial: "30%"

- name: Discover the compute hosts
  hosts: nova_conductor_all{{server|default('')}}
  max_fail_percentage: 0
  user: "{{ remote_user }}"
  become: "{{ sudo_required }}"
  tasks:
    - name: Discover the hosts
      command: docker exec -t novaconduct_{{ docker.nova_conductor.image_tag }} nova-manage cell_v2 discover_hosts
      run_once: True
      when: ACTION is defined and ACTION == "upgrade"
  tags:
    - base

- name: Simple cells setup
  hosts: nova_conductor_all{{server|default('')}}
  max_fail_percentage: 0
  user: "{{ remote_user }}"
  become: "{{ sudo_required }}"
  tasks:
    - name: Discover the hosts
      command: docker exec -t novaconduct_{{ docker.nova_conductor.image_tag }} nova-manage cell_v2 simple_cell_setup
      run_once: True
      when: ACTION is defined and ACTION == "upgrade"

    - name: Check RABBIT_HOSTS configuration
      shell: docker exec novaconduct_{{ docker.nova_conductor.image_tag }} awk '/RABBITMQ_HOSTS:/ && match($0,/@([0-9A-Fa-f:\[\]\.]+):5672/,rabbit_host) {print rabbit_host[1]}' /opt/kolla/nova_conductor_config
      register: rabbit_config
      run_once: True
      when: ACTION is defined and ACTION == "upgrade"

    - name: Check cell1 Rabbit host connection
      shell: docker exec novaconduct_{{ docker.nova_conductor.image_tag }} nova-manage cell_v2 list_cells | awk '/ cell1 / && match($0,/@([0-9A-Fa-f:\[\]\.]+):5672/,rabbit_host) {print rabbit_host[1]}'
      register: cell_config
      run_once: True
      when: ACTION is defined and ACTION == "upgrade"

    - set_fact:
        rabbit_config_v6: "{{ true if ':' in rabbit_config.stdout else false }}"
        cell_config_v6: "{{ true if ':' in cell_config.stdout else false }}"
      when: ACTION is defined and ACTION == "upgrade"

    - name: Get cell1's UUID if address family is different
      shell: docker exec novaconduct_{{ docker.nova_conductor.image_tag }} nova-manage cell_v2 list_cells | awk '/ cell1 / {print $4}'
      register: cell1_uuid
      run_once: True
      when: ACTION is defined and ACTION == "upgrade" and rabbit_config_v6 != cell_config_v6

    - name: Update cell1 if address family is different
      shell: docker exec novaconduct_{{ docker.nova_conductor.image_tag }} nova-manage cell_v2 update_cell --cell_uuid {{ cell1_uuid.stdout }}
      run_once: True
      when: ACTION is defined and ACTION == "upgrade" and cell1_uuid.stdout is defined and cell1_uuid.stdout != ""

    - name: Restart nova conductor if cell1 address family was updated
      service:
        name: "{{ item }}"
        state: restarted
      with_items:
        - docker-novaapi
        - docker-novacond
        - docker-novaconsoleauth
        - docker-novanovncproxy
        - docker-novaplacementapi
        - docker-novasch
      when: ACTION is defined and ACTION == "upgrade" and cell1_uuid.stdout is defined and cell1_uuid.stdout != ""
  tags:
    - base
