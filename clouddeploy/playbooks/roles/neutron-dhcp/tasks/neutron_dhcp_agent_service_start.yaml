- name: Check if docker service is already running
  shell: docker ps -a | grep Up | grep neutron_dhcp_agent_{{ docker.neutron_dhcp_agent.image_tag }} | cut -f1 -d " "
  register: command_result

- name: Add aliases to bashrc.
  lineinfile:
    dest: /root/.bashrc
    state: present
    regexp: "alias dhcpagent='in_container neutron_dhcp_agent_"
    line: "{{ item }}"
  with_items:
    - alias dhcpagent='in_container neutron_dhcp_agent_{{ docker.neutron_dhcp_agent.image_tag  }}'


- name: Start the Neutron DHCP Agent (lb) Docker Service
  docker_container:
    name: "neutron_dhcp_agent_{{ docker.neutron_dhcp_agent.image_tag  }}"
    image: "{{ docker.common.registry }}/{{ docker.neutron_dhcp_agent.name }}:{{ docker.neutron_dhcp_agent.image_tag  }}"
    cpuset_cpus: "{{ hostcpus }}"
    volumes:
      - "{{ docker.neutron_dhcp_agent.host_data_dir }}:{{ docker.neutron_dhcp_agent.host_data_dir  }}:ro,z"
      - /etc/localtime:/etc/localtime:ro
      - /var/log/neutron:/var/log/neutron:z
      - /run:/run:shared
      - neutron:/var/lib/neutron
    volumes_from:
      - neutron_common_{{ docker.neutron_common.image_tag }}
    interactive: yes
    timeout: "{{ DOCKER_API_TIMEOUT }}"
    privileged: yes
    ulimits: "nofile:{{ NEUTRON_AGENT_ULIMIT }}:{{ NEUTRON_AGENT_ULIMIT }}"
    network_mode: "host"
  when: (MECHANISM_DRIVERS == "linuxbridge" and command_result.stdout == "" and ACTION is undefined) or (MECHANISM_DRIVERS == "linuxbridge" and command_result.stdout == "" and ACTION is defined and ACTION == "update") or (MECHANISM_DRIVERS == "linuxbridge" and command_result.stdout == "" and ACTION is defined and ACTION == "upgrade")

- name: Start the Neutron DHCP Agent (ovs) Docker Service
  docker_container:
    name: "neutron_dhcp_agent_{{ docker.neutron_dhcp_agent.image_tag  }}"
    image: "{{ docker.common.registry }}/{{ docker.neutron_dhcp_agent.name  }}:{{ docker.neutron_dhcp_agent.image_tag }}"
    cpuset_cpus: "{{ hostcpus }}"
    volumes:
      - "{{ docker.neutron_dhcp_agent.host_data_dir }}:{{ docker.neutron_dhcp_agent.host_data_dir }}:ro,z"
      - /etc/localtime:/etc/localtime:ro
      - /var/log/neutron:/var/log/neutron:z
      - /run:/run:shared
      - neutron:/var/lib/neutron
    volumes_from:
      - neutron_common_{{ docker.neutron_common.image_tag }}
    interactive: yes
    timeout: "{{ DOCKER_API_TIMEOUT }}"
    privileged: yes
    ulimits: "nofile:{{ NEUTRON_AGENT_ULIMIT }}:{{ NEUTRON_AGENT_ULIMIT }}"
    network_mode: "host"
  when: (MECHANISM_DRIVERS == "openvswitch" and command_result.stdout == "" and ACTION is undefined) or (MECHANISM_DRIVERS == "openvswitch" and command_result.stdout == "" and ACTION is defined and ACTION == "update") or (MECHANISM_DRIVERS == "openvswitch" and command_result.stdout == "" and ACTION is defined and ACTION == "upgrade")

- name: Start the Neutron DHCP Agent (vts) Docker Service
  docker_container:
    name: "neutron_dhcp_agent_{{ docker.neutron_dhcp_agent.image_tag }}"
    image: "{{ docker.common.registry }}/{{ docker.neutron_dhcp_agent.name }}:{{ docker.neutron_dhcp_agent.image_tag }}"
    cpuset_cpus: "{{ hostcpus }}"
    volumes:
      - "{{ docker.neutron_dhcp_agent.host_data_dir }}:{{ docker.neutron_dhcp_agent.host_data_dir }}:ro,z"
      - /etc/localtime:/etc/localtime:ro
      - /var/log/neutron:/var/log/neutron:z
      - /run:/run:shared
      - neutron:/var/lib/neutron
    volumes_from:
      - neutron_common_{{ docker.neutron_common.image_tag }}
    interactive: yes
    timeout: "{{ DOCKER_API_TIMEOUT }}"
    privileged: yes
    ulimits: "nofile:{{ NEUTRON_AGENT_ULIMIT }}:{{ NEUTRON_AGENT_ULIMIT }}"
    network_mode: "host"
  when: (MECHANISM_DRIVERS == "vts" and command_result.stdout == "" and ACTION is undefined) or (MECHANISM_DRIVERS == "vts" and command_result.stdout == "" and ACTION is defined and ACTION == "update") or (MECHANISM_DRIVERS == "vts" and command_result.stdout == "" and ACTION is defined and ACTION == "upgrade")

- name: Start the Neutron DHCP Agent (vpp) Docker Service
  docker_container:
    name: "neutron_dhcp_agent_{{ docker.neutron_dhcp_agent.image_tag }}"
    image: "{{ docker.common.registry }}/{{ docker.neutron_dhcp_agent.name }}:{{ docker.neutron_dhcp_agent.image_tag }}"
    cpuset_cpus: "{{ hostcpus }}"
    volumes:
      - "{{ docker.neutron_dhcp_agent.host_data_dir  }}:{{ docker.neutron_dhcp_agent.host_data_dir }}:ro,z"
      - /etc/localtime:/etc/localtime:ro
      - /var/log/neutron:/var/log/neutron:z
      - /run:/run:shared
      - neutron:/var/lib/neutron
    volumes_from:
      - neutron_common_{{ docker.neutron_common.image_tag }}
    interactive: yes
    timeout: "{{ DOCKER_API_TIMEOUT }}"
    privileged: yes
    ulimits: "nofile:{{ NEUTRON_AGENT_ULIMIT }}:{{ NEUTRON_AGENT_ULIMIT }}"
    network_mode: "host"
  when: (MECHANISM_DRIVERS == "vpp" and command_result.stdout == "" and ACTION is undefined) or (MECHANISM_DRIVERS == "vpp" and command_result.stdout == "" and ACTION is defined and ACTION == "update") or (MECHANISM_DRIVERS == "vpp" and command_result.stdout == "" and ACTION is defined and ACTION == "upgrade")

- name: Start the Neutron DHCP Agent (aci) ACI Docker Service
  docker_container:
    name: "neutron_dhcp_agent_{{ docker.neutron_dhcp_agent.image_tag  }}"
    image: "{{ docker.common.registry }}/{{ docker.neutron_dhcp_agent.name  }}:{{ docker.neutron_dhcp_agent.image_tag }}"
    cpuset_cpus: "{{ hostcpus }}"
    volumes:
      - "{{ docker.neutron_dhcp_agent.host_data_dir }}:{{ docker.neutron_dhcp_agent.host_data_dir }}:ro,z"
      - /etc/localtime:/etc/localtime:ro
      - /var/log/neutron:/var/log/neutron:z
      - /run:/run:shared
      - neutron:/var/lib/neutron
    volumes_from:
      - neutron_common_{{ docker.neutron_common.image_tag }}
    interactive: yes
    timeout: "{{ DOCKER_API_TIMEOUT }}"
    privileged: yes
    ulimits: "nofile:{{ NEUTRON_AGENT_ULIMIT }}:{{ NEUTRON_AGENT_ULIMIT }}"
    network_mode: "host"
  when: (MECHANISM_DRIVERS == "aci" and command_result.stdout == "" and ACTION is undefined) or (MECHANISM_DRIVERS == "aci" and command_result.stdout == "" and ACTION is defined and ACTION == "update")

- pause: seconds=10 prompt="Waiting for sometime to validate container status"

- name: Check if Neutron DHCP Agent Docker container has started running
  shell: docker ps -a | grep Up | grep neutron_dhcp_agent_{{ docker.neutron_dhcp_agent.image_tag }} | cut -f1 -d " "
  register: command_result

- name: Fail if container is not UP.
  fail: msg="Neutron DHCP Agent Container does not seem to be running"
  when: command_result.stdout == ""

- name: Enable Docker Services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - docker-neutrondhcp
  tags:
    - reboot-on-failure
