- name: Check if docker service is already running
  shell: docker ps -a | grep Up | grep ovs_vswitch_{{ docker.ovs_vswitch.image_tag }} | cut -f1 -d " "
  register: command_result

- name: Add aliases to bashrc.
  lineinfile:
    dest: /root/.bashrc
    state: present
    regexp: "alias ovsvswitch='in_container ovs_vswitch_"
    line: "{{ item }}"
  with_items:
    - alias ovsvswitch='in_container ovs_vswitch_{{ docker.ovs_vswitch.image_tag }}'

- name: Start the ovs vswitch Docker Service
  docker_container:
    name: "ovs_vswitch_{{ docker.ovs_vswitch.image_tag }}"
    image: "{{ docker.common.registry }}/{{ docker.ovs_vswitch.name }}:{{ docker.ovs_vswitch.image_tag }}"
    cpuset_cpus: "{{ hostcpus }}"
    volumes:
      - "{{ docker.ovs_vswitch.host_data_dir }}:{{ docker.ovs_vswitch.host_data_dir }}:ro,z"
      - /var/log/openvswitch:/var/log/openvswitch:z
      - /etc/localtime:/etc/localtime:ro
      - ovsdbdata:/etc/openvswitch
      - /run:/run:shared
    interactive: yes
    timeout: "{{ DOCKER_API_TIMEOUT }}"
    privileged: yes
    network_mode: "host"
  when: command_result.stdout == ""

- pause: seconds=10 prompt="Waiting for sometime to validate container status"

- name: Check if OVS vswitch Docker container has started running
  shell: docker ps -a | grep Up | grep ovs_vswitch_{{ docker.ovs_vswitch.image_tag }} | cut -f1 -d " "
  register: command_result

- name: Fail if container is not UP.
  fail: msg="ovs vswitch Container does not seem to be running"
  when: command_result.stdout == ""

- name: Enable Docker Services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - docker-ovs_vswitch
  tags:
    - reboot-on-failure

# Enable the OVS Cleanup service
- name: Enable the OVS Cleanup docker service
  service:
    name: "{{ item }}"
    enabled: yes
  with_items:
    - docker-ovscleanup
  tags:
    - reboot-on-failure
