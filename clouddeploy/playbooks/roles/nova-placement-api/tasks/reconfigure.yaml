- name: Copy the new nova placement api configuration file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "0644"
  with_items:
    - { src: "nova_placement_api_config.j2", dest: "{{docker.nova_placement_api.host_data_dir }}/nova_placement_api_reconfigure" }

- name: Compare old and new rendered template
  command: diff /docker/nova_placement_api/nova_placement_api_config /docker/nova_placement_api/nova_placement_api_reconfigure
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  ignore_errors: True
  failed_when: false
  register: command_result

# Now if there is a diff there is a need to reconfigure
- name: Copy the new render config
  command: mv /docker/nova_placement_api/nova_placement_api_reconfigure /docker/nova_placement_api/nova_placement_api_config
  when: command_result.stdout != ""

# Remove the reconfigure file when there is no diff
- name: Remove reconfigure file
  file: path=/docker/nova_placement_api/nova_placement_api_reconfigure state=absent
  when: command_result.stdout == ""

# Now delete the template file inside the container
- name: Delete the nova placement api config file inside container to force a reconfigure
  command: docker cp /docker/nova_placement_api/nova_placement_api_config novaplacementapi_{{ docker.nova_placement_api.image_tag }}:/opt/kolla/nova_placement_api_config
  when: command_result.stdout != ""

- name: Generate the reconfig credentials
  command: docker exec novaplacementapi_{{ docker.nova_placement_api.image_tag }} python /opt/kolla/lookup_secrets.py -t {{ TOKEN }} -m {{ build_node_ip | ipwrap }} -o reconfig -c {{ PASSWORD_VARS }}
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: VAULT is defined and VAULT.enabled == True

- name: Compare the credentials
  command: docker exec novaplacementapi_{{ docker.nova_placement_api.image_tag }} diff /opt/kolla/install_secrets.yaml /opt/kolla/reconfig_secrets.yaml
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  ignore_errors: True
  failed_when: False
  register: secrets_result
  when: VAULT is defined and VAULT.enabled == True

- name: Copy reconfig secrets file
  command: docker exec novaplacementapi_{{ docker.nova_placement_api.image_tag }} mv /opt/kolla/reconfig_secrets.yaml /opt/kolla/install_secrets.yaml
  when: secrets_result|changed and secrets_result.stdout != ""

# Now restart the service
- name: Restart nova placement api service
  service:
    name: "{{ item }}"
    enabled: yes
    state: restarted
  with_items:
    - docker-novaplacementapi
  when: command_result.stdout != "" or (secrets_result|changed and secrets_result.stdout != "")

- name: Wait for Nova placement api to be alive
  wait_for: host={{ NOVA_HOST }} port={{ NOVA_PLACEMENT_API_PORT }}
  when: command_result.stdout != "" or (secrets_result|changed and secrets_result.stdout != "")
