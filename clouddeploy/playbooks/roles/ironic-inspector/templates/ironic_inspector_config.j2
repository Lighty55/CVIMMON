VERBOSE_LOGGING: {{ IRONIC_VERBOSE_LOGGING }}
DEBUG_LOGGING: {{ IRONIC_DEBUG_LOGGING }}
RABBITMQ_HOSTS: "{{ RABBITMQ_HOSTS }}"
INTERNAL_PROTOCOL: {{ INTERNAL_PROTOCOL }}
IRONIC_INSPECTOR_HOST: {{ IRONIC_INSPECTOR_HOST }}
IRONIC_INSPECTOR_DB_USER: {{ IRONIC_INSPECTOR_DB_USER }}
IRONIC_INSPECTOR_DB_NAME: {{ IRONIC_INSPECTOR_DB_NAME }}
MARIADB_SERVICE_HOST: {{ MARIADB_SERVICE_HOST | ipwrap }}

KEYSTONE_PUBLIC_SERVICE_HOST: "{{ KEYSTONE_PUBLIC_SERVICE_HOST }}"
KEYSTONE_PUBLIC_SERVICE_PORT: "{{ KEYSTONE_PUBLIC_SERVICE_PORT }}"
KEYSTONE_ADMIN_SERVICE_HOST: "{{ KEYSTONE_ADMIN_SERVICE_HOST }}"
KEYSTONE_ADMIN_SERVICE_PORT: "{{ KEYSTONE_ADMIN_SERVICE_PORT }}"

IRONIC_INSPECTOR_KEYSTONE_USER: {{ IRONIC_INSPECTOR_KEYSTONE_USER }}
SERVICE_TENANT_NAME: {{ SERVICE_TENANT_NAME }}

PROCESSING_ADD_PORTS: {{ PROCESSING_ADD_PORTS }}
PROCESSING_KEEP_PORTS: {{ PROCESSING_KEEP_PORTS }}
PROCESSING_OVERWRITE_EXISTING: {{ PROCESSING_OVERWRITE_EXISTING }}
PROCESSING_DEFAULT_PROCESSING_HOOKS: {{ PROCESSING_DEFAULT_PROCESSING_HOOKS }}
PROCESSING_ALWAYS_STORE_RAMDISK_LOGS: {{ PROCESSING_ALWAYS_STORE_RAMDISK_LOGS }}

# 'example' hook does do anything but posts introspection data to log.
# See implementation in ironic-inspector project ironic_inspector/plugins/example.py
# The hook value need to be set to any value to disable blocking uknown hosts during inspection process
# See source code ironic_inspector/pxe_filter/dnsmasq.py line #256
#    if _should_enable_unknown_hosts():
#        wildcard_filter = _WHITELIST_UNKNOWN_HOSTS
#        log_wildcard_filter = 'whitelist'
# def _should_enable_unknown_hosts():
#     return (node_cache.introspection_active() or
#             CONF.processing.node_not_found_hook is not None)
PROCESSING_NODE_NOT_FOUND_HOOK: {% if IRONIC_INSPECTOR_SELF_DISCOVERY and IRONIC is defined and IRONIC.INSPECTOR_SELF_DISCOVERY | default(False) %}enroll{% else %}example{% endif %}

DISCOVERY_ENROLL_NODE_DRIVER: {{ DISCOVERY_ENROLL_NODE_DRIVER }}

PXE_FILTER_DRIVER: {{ PXE_FILTER_DRIVER }}
PXE_FILTER_SYNC_PERIOD: {{ PXE_FILTER_SYNC_PERIOD }}

{% if VAULT is defined and VAULT.enabled == True %}
# VAULT
VAULT_TOKEN: {{ TOKEN }}
MGMT_IP: {{ build_node_ip | ipwrap }}
PASSWORD_VARS: {{ PASSWORD_VARS }}
{% else %}
IRONIC_INSPECTOR_DB_PASSWORD: {{ IRONIC_INSPECTOR_DB_PASSWORD }}
IRONIC_INSPECTOR_KEYSTONE_PASSWORD: {{ IRONIC_INSPECTOR_KEYSTONE_PASSWORD }}
RABBITMQ_PASSWORD: {{ RABBITMQ_PASSWORD }}
{% endif %}
