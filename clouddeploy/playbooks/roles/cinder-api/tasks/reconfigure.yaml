- name: Check cinder internal tenant
  environment:
    OS_AUTH_URL: "{{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v3"
    OS_USERNAME: "{{ ADMIN_USER }}"
    OS_PASSWORD: "{{ ADMIN_USER_PASSWORD }}"
    OS_TENANT_NAME: "{{ ADMIN_TENANT_NAME }}"
    OS_REGION_NAME: "RegionOne"
    OS_PROJECT_NAME: "{{ ADMIN_TENANT_NAME }}"
    OS_PROJECT_DOMAIN_NAME: "default"
    OS_USER_DOMAIN_NAME: "default"
    OS_IDENTITY_API_VERSION: 3
  shell: openstack project list | grep -w "cinder-internal"| awk '{ print $2}'
  register: tenant
  run_once: true
  delegate_to: 127.0.0.1

- name: Check cinder internal user
  environment:
    OS_AUTH_URL: "{{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v3"
    OS_USERNAME: "{{ ADMIN_USER }}"
    OS_PASSWORD: "{{ ADMIN_USER_PASSWORD }}"
    OS_TENANT_NAME: "{{ ADMIN_TENANT_NAME }}"
    OS_REGION_NAME: "RegionOne"
    OS_PROJECT_NAME: "{{ ADMIN_TENANT_NAME }}"
    OS_PROJECT_DOMAIN_NAME: "default"
    OS_USER_DOMAIN_NAME: "default"
    OS_IDENTITY_API_VERSION: 3
  shell: openstack user list | grep -w "cinder-internal"| awk '{ print $2}'
  register: user
  run_once: true
  delegate_to: 127.0.0.1

- name: add tenant/user UUID cinder
  set_fact:
    tenant_uuid: "{{ tenant.stdout }}"
    user_uuid: "{{ user.stdout }}"

- name: Copy the new cinder api configuration file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "0644"
  with_items:
    - { src: "cinder_api_config.j2", dest: "{{docker.cinder_api.host_data_dir }}/cinder_api_reconfigure" }

- name: Compare old and new rendered template
  command: diff /docker/cinder_api/cinder_api_config /docker/cinder_api/cinder_api_reconfigure
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  ignore_errors: True
  failed_when: false
  register: command_result

# Now if there is a diff there is a need to reconfigure
- name: Copy the new render config
  command: mv /docker/cinder_api/cinder_api_reconfigure /docker/cinder_api/cinder_api_config
  when: command_result.stdout != ""

# Remove the reconfigure file when there is no diff
- name: Remove reconfigure file
  file: path=/docker/cinder_api/cinder_api_reconfigure state=absent
  when: command_result.stdout == ""

- name: Generate the reconfig credentials
  command: docker exec cinderapi_{{ docker.cinder_api.image_tag }} python /opt/kolla/lookup_secrets.py -t {{ TOKEN }} -m {{ build_node_ip | ipwrap }} -o reconfig -c {{ PASSWORD_VARS }}
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: VAULT is defined and VAULT.enabled == True

- name: Compare the credentials
  command: docker exec cinderapi_{{ docker.cinder_api.image_tag }} diff /opt/kolla/install_secrets.yaml /opt/kolla/reconfig_secrets.yaml
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  ignore_errors: True
  failed_when: False
  register: secrets_result
  when: VAULT is defined and VAULT.enabled == True

- name: Copy reconfig secrets file
  command: docker exec cinderapi_{{ docker.cinder_api.image_tag }} mv /opt/kolla/reconfig_secrets.yaml /opt/kolla/install_secrets.yaml
  when: secrets_result|changed and secrets_result.stdout != ""

- set_fact:
    DB_ROOT_PASSWORD: '{{ lookup("hashi_vault", "secret=secret/data/cvim-regen-secrets/DB_ROOT_PASSWORD:data
  token={{ TOKEN }} url=http://{{ build_node_ip | ipwrap }}:8200")["value"]}}'
    ADMIN_USER_PASSWORD: '{{ lookup("hashi_vault", "secret=secret/data/cvim-regen-secrets/ADMIN_USER_PASSWORD:data
  token={{ TOKEN }} url=http://{{ build_node_ip | ipwrap }}:8200")["value"]}}'
    CINDER_DB_PASSWORD: '{{ lookup("hashi_vault", "secret=secret/data/cvim-regen-secrets/CINDER_DB_PASSWORD:data
  token={{ TOKEN }} url=http://{{ build_node_ip | ipwrap }}:8200")["value"]}}'
    CINDER_KEYSTONE_PASSWORD: '{{ lookup("hashi_vault", "secret=secret/data/cvim-regen-secrets/CINDER_KEYSTONE_PASSWORD:data
  token={{ TOKEN }} url=http://{{ build_node_ip | ipwrap }}:8200")["value"]}}'
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: secrets_result|changed

- name: Copy Cinder Policy Files
  template:
    src: "{{ playbook_dir }}/roles/cinder-api/templates/{{ item }}"
    dest: "{{docker.cinder_api.host_data_dir }}/{{ item }}_reconfigure"
  with_items:
    - "cinder_policy.json"

- name: Compare old and new rendered policy
  command: diff /docker/cinder_api/cinder_policy.json /docker/cinder_api/cinder_policy.json_reconfigure
  ignore_errors: True
  failed_when: false
  register: policy_diff

# Now if there is a diff there is a need to reconfigure
- name: Copy the new render config
  command: mv /docker/cinder_api/cinder_policy.json_reconfigure /docker/cinder_api/cinder_policy.json
  when: policy_diff.stdout != ""

# Remove the reconfigure policy when there is no diff
- name: Remove reconfigure file
  file: path=/docker/cinder_api/cinder_policy.json_reconfigure state=absent
  when: policy_diff.stdout == ""

- name: Reset the SELinux labelling for new policy files
  command: chcon -R -t svirt_sandbox_file_t "{{ docker.cinder_api.host_data_dir }}"
  when: policy_diff.stdout != ""

# Now update the SQL password if the CINDER_DB_PASSWORD is part of update
- name: Update the SQL password
  command: docker exec mariadb_{{ docker.mariadb.image_tag }} mysql -u root -p{{ DB_ROOT_PASSWORD }} -e "SET PASSWORD FOR '{{ CINDER_DB_USER }}'@'%' = PASSWORD('{{ CINDER_DB_PASSWORD }}');flush privileges"
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: "(secrets_result|changed and  'CINDER_DB_PASSWORD' in secrets_result.stdout ) or  'CINDER_DB_PASSWORD' in command_result.stdout "

# Now update the Cinder keystone password if it is part of update
- name: Update the cinder keystone password
  command: >
           docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
           /usr/bin/ansible localhost -m vim_keystone -a
           "action=user_update
           os_auth_url={{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v{{ KEYSTONE_API_VERSION }}
           os_username={{ ADMIN_USER }}
           os_password={{ ADMIN_USER_PASSWORD }}
           os_tenant_name={{ ADMIN_TENANT_NAME }}
           username={{ CINDER_KEYSTONE_USER }}
           password={{ CINDER_KEYSTONE_PASSWORD }}
           project={{ SERVICE_TENANT_NAME }}
           role=admin"
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: "(secrets_result|changed and  'CINDER_KEYSTONE_PASSWORD' in secrets_result.stdout ) or  'CINDER_KEYSTONE_PASSWORD' in command_result.stdout "

# Now delete the template file inside the container
- name: Delete the cinder config file inside container to force a reconfigure
  command: docker cp /docker/cinder_api/cinder_api_config cinderapi_{{ docker.cinder_api.image_tag }}:/opt/kolla/cinder_api_config
  when: command_result.stdout != ""

- name: Updating the cinder v2 endpoints
  command: >
           docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
           /usr/bin/ansible localhost -m vim_keystone -a
           "action=endpoint_create
           os_auth_url={{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v{{ KEYSTONE_API_VERSION }}
           os_username={{ ADMIN_USER }}
           os_password={{ ADMIN_USER_PASSWORD }}
           os_tenant_name={{ ADMIN_TENANT_NAME }}
           service_name=cinderv2
           endpoint_region=RegionOne
           endpoint_internal={{ INTERNAL_PROTOCOL }}://{{ CINDER_API_SERVICE_HOST }}:8776/v2/%(tenant_id)s
           endpoint_admin={{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:8776/v2/%(tenant_id)s
           endpoint_public={{ PUBLIC_PROTOCOL }}://{{ KEYSTONE_PUBLIC_SERVICE_HOST }}:8776/v2/%(tenant_id)s"
  run_once: True
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: " 'PUBLIC_PROTOCOL' in command_result.stdout or 'KEYSTONE_PUBLIC_SERVICE_HOST' in command_result.stdout "

- name: Updating the cinder v3 endpoints
  command: >
           docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
           /usr/bin/ansible localhost -m vim_keystone -a
           "action=endpoint_create
           os_auth_url={{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v{{ KEYSTONE_API_VERSION }}
           os_username={{ ADMIN_USER }}
           os_password={{ ADMIN_USER_PASSWORD }}
           os_tenant_name={{ ADMIN_TENANT_NAME }}
           service_name=cinderv3
           endpoint_region=RegionOne
           endpoint_internal={{ INTERNAL_PROTOCOL }}://{{ CINDER_API_SERVICE_HOST }}:8776/v3/%(tenant_id)s
           endpoint_admin={{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:8776/v3/%(tenant_id)s
           endpoint_public={{ PUBLIC_PROTOCOL }}://{{ KEYSTONE_PUBLIC_SERVICE_HOST }}:8776/v3/%(tenant_id)s"
  run_once: True
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: " 'PUBLIC_PROTOCOL' in command_result.stdout or 'KEYSTONE_PUBLIC_SERVICE_HOST' in command_result.stdout "

# Now restart the service
- name: Restart cinder api service
  service:
    name: "{{ item }}"
    enabled: yes
    state: restarted
  with_items:
    - docker-cinderapi
  when: command_result.stdout != "" or policy_diff.stdout != "" or (secrets_result|changed and secrets_result.stdout != "")

- name: Wait for Cinder API to be alive
  wait_for: host={{ CINDER_HOST }} port={{ CINDER_API_PORT }}
  when: command_result.stdout != "" or policy_diff.stdout != "" or (secrets_result|changed and secrets_result.stdout != "")

- name: Check whether staging_secrets exist
  stat: path="{{ lookup('env', 'HOME') }}/openstack-configs/staging_secrets.yaml"
  register: staging_exists
  delegate_to: localhost
  run_once: True

- name: find if the CINDER_DB_PASSWORD  has changed
  shell: diff {{ lookup('env', 'HOME') }}/openstack-configs/secrets.yaml {{ lookup('env', 'HOME') }}/openstack-configs/staging_secrets.yaml | grep CINDER_DB_PASSWORD
  register: cinder_db_password
  ignore_errors: True
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  failed_when: false
  delegate_to: localhost
  run_once: True
  when: staging_exists.stat.exists == True

- name: Modify the secrets yaml file
  lineinfile: dest={{ lookup('env', 'HOME') }}/openstack-configs/secrets.yaml regexp="^CINDER_DB_PASSWORD" line="CINDER_DB_PASSWORD{{ ":" }} {{ CINDER_DB_PASSWORD }}"
  when: staging_exists.stat.exists == True and cinder_db_password.stdout != ""
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  delegate_to: localhost
  run_once: True

- name: find if the CINDER_KEYSTONE_PASSWORD  has changed
  shell: diff {{ lookup('env', 'HOME') }}/openstack-configs/secrets.yaml {{ lookup('env', 'HOME') }}/openstack-configs/staging_secrets.yaml | grep CINDER_KEYSTONE_PASSWORD
  register: cinder_key_password
  ignore_errors: True
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  failed_when: false
  delegate_to: localhost
  run_once: True
  when: staging_exists.stat.exists == True

- name: Modify the secrets yaml file
  lineinfile: dest={{ lookup('env', 'HOME') }}/openstack-configs/secrets.yaml regexp="^CINDER_KEYSTONE_PASSWORD" line="CINDER_KEYSTONE_PASSWORD{{ ":" }} {{ CINDER_KEYSTONE_PASSWORD }}"
  when: staging_exists.stat.exists == True and cinder_key_password.stdout != ""
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  delegate_to: localhost
  run_once: True

- name: Write new password to engine
  environment:
    VAULT_ADDR: http://{{ build_node_ip | ipwrap }}:8200
  shell: vault kv put secret/cvim-secrets/CINDER_DB_PASSWORD value={{ CINDER_DB_PASSWORD }}
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  run_once: True
  when:
    - inventory_hostname == "{{ groups['cinder_api_all'][0] }}"
    - secrets_result|changed and 'CINDER_DB_PASSWORD' in secrets_result.stdout

- name: Write new password to engine
  environment:
    VAULT_ADDR: http://{{ build_node_ip | ipwrap }}:8200
  shell: vault kv put secret/cvim-secrets/CINDER_KEYSTONE_PASSWORD value={{ CINDER_KEYSTONE_PASSWORD }}
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  run_once: True
  when:
    - inventory_hostname == "{{ groups['cinder_api_all'][0] }}"
    - secrets_result|changed and 'CINDER_KEYSTONE_PASSWORD' in secrets_result.stdout
