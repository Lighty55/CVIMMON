# First remove the new container and artifacts for cloudpulse
- name: Shut off cloudpulse docker service
  service:
    name: docker-cloudpulse
    enabled: no
    state: stopped
  ignore_errors: true
  failed_when: false

- name: Remove cloudpulse service file
  file:
    path: "/usr/lib/systemd/system/docker-cloudpulse.service"
    state: absent

- name: Systemctl daemon-reload.
  command: /usr/bin/systemctl daemon-reload

- name: Stop and remove cloudpulse docker container.
  docker_container:
    image: "{{ item.image }}"
    name: "{{ item.name }}"
    state: absent
    timeout: "{{ DOCKER_API_TIMEOUT }}"
  with_items:
    - { image: "", name: "cloudpulse_server_{{ docker.cloudpulse_server.image_tag }}" }

- name: Remove cloudpulse docker image
  docker_image:
    name: "{{ docker.common.registry }}/{{ docker.cloudpulse_server.name }}"
    tag: "{{ docker.cloudpulse_server.image_tag }}"
    state: absent
    timeout: "{{ DOCKER_API_TIMEOUT }}"

# Now list and remove cloudpulse volume contents
- name: List cloudpulse volume contents
  shell: ls -A1 /docker/cloudpulse/
  register: contents

- name: Remove cloudpulse volume contents
  file:
    path: /docker/cloudpulse/{{ item }}
    state: absent
  with_items: "{{ contents.stdout_lines }}"


#  Recover the cloudpulse volume contents
- name: recover cloudpulse volume contents
  shell: cp -p /docker/cloudpulse_{{ CLOUDPULSE_PREVIOUS_TAG }}/* /docker/cloudpulse/.

# Now remove the backup volume
- name: Remove back up cloudpulse Directory
  file:
    path: "/docker/cloudpulse_{{ CLOUDPULSE_PREVIOUS_TAG }}"
    state: absent

##########################################
# Copy and enable Service Manager Definition
##########################################
- name: Copy Containers restart-on-boot files.
  command: cp /docker/cloudpulse/docker-cloudpulse.service /usr/lib/systemd/system/docker-cloudpulse.service

- name: Systemctl daemon-reload.
  command: /usr/bin/systemctl daemon-reload

- name: systemctl reset failed
  shell: systemctl reset-failed

- name: Add aliases to bashrc.
  lineinfile:
    dest: /root/.bashrc
    state: present
    regexp: "alias cloudpulse='in_container cloudpulse_server_"
    line: "{{ item }}"
  with_items:
    - alias cloudpulse='in_container cloudpulse_server_{{ CLOUDPULSE_PREVIOUS_TAG }}'

# Start the container
- name: start the cloudpulse service
  service:
    name: docker-cloudpulse
    enabled: yes
    state: started

- name: Wait for cloudpulse to be alive
  wait_for: host={{ CLOUDPULSE_SERVER_BIND_IP }} port={{ CLOUDPULSE_PORT }}
