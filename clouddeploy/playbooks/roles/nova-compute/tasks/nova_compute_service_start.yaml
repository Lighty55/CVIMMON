- name: Check if Nova compute Docker container is already running
  shell: docker ps | egrep ' novacompute_{{ docker.nova_compute.image_tag }}$' | cut -f1 -d " "
  register: command_result

- name: Add aliases to bashrc.
  lineinfile:
    dest: /root/.bashrc
    state: present
    regexp: "alias compute='in_container novacompute_"
    line: "{{ item }}"
  with_items:
    - alias compute='in_container novacompute_{{ docker.nova_compute.image_tag }}'

- name: Install nfs-utils packages
  yum:
    name: nfs-utils
    state: present
  when: NETAPP is defined

- name: Mount NFS share
  mount:
    name: "{{ NOVA_DIR }}"
    src: "{{ NETAPP.nova_nfs_server }}:/{{ NETAPP.nova_nfs_path }}"
    fstype: nfs
    state: mounted
  when: NETAPP is defined

- name: Start the Nova compute Docker Service with Intel RDT
  docker_container:
    name: "novacompute_{{ docker.nova_compute.image_tag }}"
    image: "{{ docker.common.registry }}/{{ docker.nova_compute.name }}:{{ docker.nova_compute.image_tag }}"
    privileged: True
    volumes:
        - "{{ docker.nova_compute.host_data_dir }}:{{ docker.nova_compute.host_data_dir }}:ro,z"
        - "{{ NOVA_VOLUME }}:{{ NOVA_VOLUME }}:shared"
        - "{{ LIBVIRT_VOLUME }}:{{ LIBVIRT_VOLUME }}:z"
        - "{{ QEMU_VOLUME }}:{{ QEMU_VOLUME }}:z"
        - "{{ RUN_VOLUME }}:{{ RUN_VOLUME }}:z"
        - "{{ CGROUP_VOLUME }}:{{ CGROUP_VOLUME }}:z"
        - /dev:/dev:z
        - /etc/iscsi/:/etc/iscsi/:z
        - /lib/modules:/lib/modules:ro,z
        - /run:/run:shared
        - /etc/localtime:/etc/localtime:ro
        # NOTE: for now will just store the qemu logs in anonymous volume since
        #       it is not being consume in fluentd or anywhere
        - /var/log/qemu
        - /var/log/nova:/var/log/nova:z
    volumes_from:
      - novacommon_{{ docker.nova_common.image_tag }}
    ports: "9292:9292, 5000:5000"
    interactive: yes
    timeout: "{{ DOCKER_API_TIMEOUT }}"
    network_mode: "host"
    ulimits: "nofile:{{ NOVA_COMPUTE_ULIMIT }}:{{ NOVA_COMPUTE_ULIMIT }}"
  when: (INTEL_RDT.ENABLE_CAT) and ((command_result.stdout == "" and ACTION is undefined) or (command_result.stdout == "" and ACTION is defined and ACTION == "update") or (command_result.stdout == "" and ACTION is defined and ACTION == "upgrade"))

- name: Start the Nova compute Docker Service without Intel RDT
  docker_container:
    name: "novacompute_{{ docker.nova_compute.image_tag }}"
    image: "{{ docker.common.registry }}/{{ docker.nova_compute.name }}:{{ docker.nova_compute.image_tag }}"
    cpuset_cpus: "{{ hostcpus }}"
    privileged: True
    volumes:
        - "{{ docker.nova_compute.host_data_dir }}:{{ docker.nova_compute.host_data_dir }}:ro,z"
        - "{{ NOVA_VOLUME }}:{{ NOVA_VOLUME }}:shared"
        - "{{ LIBVIRT_VOLUME }}:{{ LIBVIRT_VOLUME }}:z"
        - "{{ QEMU_VOLUME }}:{{ QEMU_VOLUME }}:z"
        - "{{ RUN_VOLUME }}:{{ RUN_VOLUME }}:z"
        - "{{ CGROUP_VOLUME }}:{{ CGROUP_VOLUME }}:z"
        - /dev:/dev:z
        - /etc/iscsi/:/etc/iscsi/:z
        - /lib/modules:/lib/modules:ro,z
        - /run:/run:shared
        - /etc/localtime:/etc/localtime:ro
        # NOTE: for now will just store the qemu logs in anonymous volume since
        #       it is not being consume in fluentd or anywhere
        - /var/log/qemu
        - /var/log/nova:/var/log/nova:z
    volumes_from:
      - novacommon_{{ docker.nova_common.image_tag }}
    ports: "9292:9292, 5000:5000"
    interactive: yes
    timeout: "{{ DOCKER_API_TIMEOUT }}"
    network_mode: "host"
    ulimits: "nofile:{{ NOVA_COMPUTE_ULIMIT }}:{{ NOVA_COMPUTE_ULIMIT }}"
  when: (not INTEL_RDT.ENABLE_CAT) and ((command_result.stdout == "" and ACTION is undefined) or (command_result.stdout == "" and ACTION is defined and ACTION == "update") or (command_result.stdout == "" and ACTION is defined and ACTION == "upgrade"))

- pause: seconds=10 prompt="Waiting for sometime"

- name: Check if Nova Compute  Docker container has started running
  shell: docker ps | egrep ' novacompute_{{ docker.nova_compute.image_tag }}$' | cut -f1 -d " "
  register: command_result

- name: Fail if container is not UP.
  fail: msg="Nova Compute Container does not seem to be running"
  when: command_result.stdout == ""

- name: Enable Docker Services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - docker-novacpu
  tags:
    - reboot-on-failure

- name: Reset systemctl failures
  shell: systemctl reset-failed
  when: ACTION is defined and ACTION == "update"

- name: Make sure nova ssh is started again after update
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - docker-novassh
  when: ACTION is defined and ACTION == "update" and NETAPP is not defined

