- name: Copy the new ceilometer central configuration file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "0644"
  with_items:
    - { src: "ceilometer_central_config.j2", dest: "{{ docker.ceilometer_central.host_data_dir }}/ceilometer_central_reconfigure.j2" }

- name: Compare old and new rendered template
  command: diff {{ docker.ceilometer_central.host_data_dir }}/ceilometer_central_config.j2 {{ docker.ceilometer_central.host_data_dir }}/ceilometer_central_reconfigure.j2
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  ignore_errors: True
  failed_when: false
  register: command_result

# Now if there is a diff there is a need to reconfigure
- name: Copy the new render config
  command: mv {{ docker.ceilometer_central.host_data_dir }}/ceilometer_central_reconfigure.j2 {{ docker.ceilometer_central.host_data_dir }}/ceilometer_central_config.j2
  when: command_result.stdout != ""

# Remove the reconfigure file when there is no diff
- name: Remove reconfigure file
  file: path={{ docker.ceilometer_central.host_data_dir }}/ceilometer_central_reconfigure.j2 state=absent
  when: command_result.stdout == ""

# Ceilometer pipeline difference check
- name: Reconf | Copy Ceilometer pipeline file
  template:
    src: "{{ playbook_dir }}/roles/ceilometer-common/templates/pipeline.yaml"
    dest: "{{ docker.ceilometer_central.host_data_dir }}/pipeline.yaml_reconfigure"

- name: Reconf | Compare old and new rendered pipeline
  command: diff {{ docker.ceilometer_central.host_data_dir }}/pipeline.yaml {{ docker.ceilometer_central.host_data_dir }}/pipeline.yaml_reconfigure
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  ignore_errors: True
  failed_when: false
  register: pipeline_diff

# Now if there is a diff there is a need to reconfigure
- name: Reconf | Copy the new pipeline config
  command: mv {{ docker.ceilometer_central.host_data_dir }}/pipeline.yaml_reconfigure {{ docker.ceilometer_central.host_data_dir }}/pipeline.yaml
  when: pipeline_diff.stdout

# Remove the reconfigure pipeline.yaml when there is no diff
- name: Reconf | Remove pipeline reconfigure file
  file: path={{ docker.ceilometer_central.host_data_dir }}/pipeline.yaml_reconfigure state=absent
  when: not pipeline_diff.stdout

# Ceilometer polling difference check
- name: Reconf | Copy Ceilometer pipeline file
  template:
    src: "{{ playbook_dir }}/roles/ceilometer-common/templates/polling.yaml"
    dest: "{{ docker.ceilometer_central.host_data_dir }}/polling.yaml_reconfigure"

- name: Reconf | Compare old and new rendered polling yaml
  command: diff {{ docker.ceilometer_central.host_data_dir }}/polling.yaml {{ docker.ceilometer_central.host_data_dir }}/polling.yaml_reconfigure
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  ignore_errors: True
  failed_when: false
  register: polling_diff

# Now if there is a diff there is a need to reconfigure
- name: Reconf | Copy the new polling config
  command: mv {{ docker.ceilometer_central.host_data_dir }}/polling.yaml_reconfigure {{ docker.ceilometer_central.host_data_dir }}/polling.yaml
  when: polling_diff.stdout

# Remove the reconfigure pipeline.yaml when there is no diff
- name: Reconf | Remove polling reconfigure file
  file: path={{ docker.ceilometer_central.host_data_dir }}/polling.yaml_reconfigure state=absent
  when: not polling_diff.stdout

- name: Generate the reconfig credentials
  command: docker exec ceilometercentral_{{ docker.ceilometer_central.image_tag }} python /opt/kolla/lookup_secrets.py -t {{ TOKEN }} -m {{ build_node_ip | ipwrap }} -o reconfig -c {{ PASSWORD_VARS }}
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: VAULT is defined and VAULT.enabled == True

- name: Compare the credentials
  command: docker exec ceilometercentral_{{ docker.ceilometer_central.image_tag }} diff /opt/kolla/install_secrets.yaml /opt/kolla/reconfig_secrets.yaml
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  ignore_errors: True
  failed_when: False
  register: secrets_result
  when: VAULT is defined and VAULT.enabled == True

- name: Copy reconfig secrets file
  command: docker exec ceilometercentral_{{ docker.ceilometer_central.image_tag }} mv /opt/kolla/reconfig_secrets.yaml /opt/kolla/install_secrets.yaml
  when: secrets_result|changed and secrets_result.stdout != ""

- set_fact:
    DB_ROOT_PASSWORD: '{{ lookup("hashi_vault", "secret=secret/data/cvim-regen-secrets/DB_ROOT_PASSWORD:data
  token={{ TOKEN }} url=http://{{ build_node_ip | ipwrap }}:8200")["value"]}}'
    ADMIN_USER_PASSWORD: '{{ lookup("hashi_vault", "secret=secret/data/cvim-regen-secrets/ADMIN_USER_PASSWORD:data
  token={{ TOKEN }} url=http://{{ build_node_ip | ipwrap }}:8200")["value"]}}'
    CEILOMETER_DB_PASSWORD: '{{ lookup("hashi_vault", "secret=secret/data/cvim-regen-secrets/CEILOMETER_DB_PASSWORD:data
  token={{ TOKEN }} url=http://{{ build_node_ip | ipwrap }}:8200")["value"]}}'
    CEILOMETER_KEYSTONE_PASSWORD: '{{ lookup("hashi_vault", "secret=secret/data/cvim-regen-secrets/CEILOMETER_KEYSTONE_PASSWORD:data
  token={{ TOKEN }} url=http://{{ build_node_ip | ipwrap }}:8200")["value"]}}'
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: secrets_result|changed

# Now update the SQL password if the CEILOMETER_DB_PASSWORD is part of update
- name: Update the SQL password
  command: docker exec mariadb_{{ docker.mariadb.image_tag }} mysql -u root -p{{ DB_ROOT_PASSWORD }} -e "SET PASSWORD FOR '{{ CEILOMETER_DB_USER }}'@'%' = PASSWORD('{{ CEILOMETER_DB_PASSWORD }}');flush privileges"
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: "(secrets_result|changed and  'CEILOMETER_DB_PASSWORD' in secrets_result.stdout ) or  'CEILOMETER_DB_PASSWORD' in command_result.stdout "

# Now update the CEILOMETER keystone password if it is part of update
- name: Update the ceilometer keystone password
  command: >
           docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
           /usr/bin/ansible localhost -m vim_keystone -a
           "action=user_update
           os_auth_url={{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v{{ KEYSTONE_API_VERSION }}
           os_username={{ ADMIN_USER }}
           os_password={{ ADMIN_USER_PASSWORD }}
           os_tenant_name={{ ADMIN_TENANT_NAME }}
           username={{ CEILOMETER_KEYSTONE_USER }}
           password={{ CEILOMETER_KEYSTONE_PASSWORD }}
           project={{ SERVICE_TENANT_NAME }}
           role=admin"
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: "(secrets_result|changed and  'CEILOMETER_KEYSTONE_PASSWORD' in secrets_result.stdout ) or  'CEILOMETER_KEYSTONE_PASSWORD' in command_result.stdout "

- name: Updating the ceilometer endpoints
  command: >
           docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
           /usr/bin/ansible localhost -m vim_keystone -a
           "action=endpoint_create
           os_auth_url={{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v{{ KEYSTONE_API_VERSION }}
           os_username={{ ADMIN_USER }}
           os_password={{ ADMIN_USER_PASSWORD }}
           os_tenant_name={{ ADMIN_TENANT_NAME }}
           service_name=ceilometer
           endpoint_region=RegionOne
           endpoint_internal={{ INTERNAL_PROTOCOL }}://{{ CEILOMETER_API_SERVICE_HOST }}:8777
           endpoint_admin={{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:8777
           endpoint_public={{ PUBLIC_PROTOCOL }}://{{ KEYSTONE_PUBLIC_SERVICE_HOST }}:8777"
  run_once: True
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: " 'PUBLIC_PROTOCOL' in command_result.stdout or 'KEYSTONE_PUBLIC_SERVICE_HOST' in command_result.stdout "

# Now delete the template file inside the container
- name: Delete the ceilometer central config file inside container to force a reconfigure
  command: docker cp {{ docker.ceilometer_central.host_data_dir }}/ceilometer_central_config.j2 ceilometercentral_{{ docker.ceilometer_central.image_tag }}:/opt/kolla/ceilometer_central_config.j2
  when: command_result.stdout != ""

# Now delete the template file inside the container
- name: Delete the ceilometer central pipeline file inside container to force a reconfigure
  command: docker cp {{ docker.ceilometer_central.host_data_dir }}/pipeline.yaml ceilometercentral_{{ docker.ceilometer_central.image_tag }}:/etc/ceilometer/pipeline.yaml
  when: pipeline_diff.stdout

# Delete previous polling template in container
- name: Delete the ceilometer central polling file inside container to force a reconfigure
  command: docker cp {{ docker.ceilometer_central.host_data_dir }}/polling.yaml ceilometercentral_{{ docker.ceilometer_central.image_tag }}:/etc/ceilometer/polling.yaml
  when: polling_diff.stdout

# Now restart the service
- name: Restart ceilometer central service
  service:
    name: "{{ item }}"
    enabled: yes
    state: restarted
  with_items:
    - docker-ceilometercentral
  when: (command_result.stdout != "" or pipeline_diff.stdout or polling_diff.stdout or (secrets_result|changed and secrets_result.stdout != ""))

- pause: seconds=5 prompt="Waiting for sometime"
  when: (command_result.stdout != "" or pipeline_diff.stdout or polling_diff.stdout or (secrets_result|changed and secrets_result.stdout != ""))

- name: Check if Ceilometer central Docker container has started running
  shell: docker ps -a | grep Up | grep ceilometercentral_{{ docker.ceilometer_central.image_tag }} | cut -f1 -d " "
  register: container_status
  when: (command_result.stdout != "" or pipeline_diff.stdout or polling_diff.stdout or (secrets_result|changed and secrets_result.stdout != ""))

- name: Fail if container is not UP.
  fail: msg="Ceilometer central container does not seem to be running"
  when: (container_status is defined and container_status.stdout == "")

# Now update the secrets file with new passwords
- name: Check whether staging_secrets exist
  stat: path="{{ lookup('env', 'HOME') }}/openstack-configs/staging_secrets.yaml"
  register: staging_exists
  delegate_to: localhost
  run_once: True

- name: find if the CEILOMETER_DB_PASSWORD has changed
  shell: diff {{ lookup('env', 'HOME') }}/openstack-configs/secrets.yaml {{ lookup('env', 'HOME') }}/openstack-configs/staging_secrets.yaml | grep CEILOMETER_DB_PASSWORD
  register: ceilometer_db_password
  ignore_errors: True
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  failed_when: false
  delegate_to: localhost
  run_once: True
  when: staging_exists.stat.exists == True

- name: Modify the secrets yaml file
  lineinfile: dest={{ lookup('env', 'HOME') }}/openstack-configs/secrets.yaml regexp="^CEILOMETER_DB_PASSWORD" line="CEILOMETER_DB_PASSWORD{{ ":" }} {{ CEILOMETER_DB_PASSWORD }}"
  when:  staging_exists.stat.exists == True and ceilometer_db_password.stdout != ""
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  delegate_to: localhost
  run_once: True

- name: Find if the CEILOMETER_KEYSTONE_PASSWORD has changed
  shell: diff {{ lookup('env', 'HOME') }}/openstack-configs/secrets.yaml {{ lookup('env', 'HOME') }}/openstack-configs/staging_secrets.yaml | grep CEILOMETER_KEYSTONE_PASSWORD
  register: ceilometer_keystone_password
  ignore_errors: True
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  failed_when: false
  delegate_to: localhost
  run_once: True
  when: staging_exists.stat.exists == True

- name: Modify the secrets yaml file
  lineinfile: dest={{ lookup('env', 'HOME') }}/openstack-configs/secrets.yaml regexp="^CEILOMETER_KEYSTONE_PASSWORD" line="CEILOMETER_KEYSTONE_PASSWORD{{ ":" }} {{ CEILOMETER_KEYSTONE_PASSWORD }}"
  when:  staging_exists.stat.exists == True and ceilometer_keystone_password.stdout != ""
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  delegate_to: localhost
  run_once: True

- name: Write new password to engine
  environment:
    VAULT_ADDR: http://{{ build_node_ip | ipwrap }}:8200
  shell: vault kv put secret/cvim-secrets/CEILOMETER_DB_PASSWORD value={{ CEILOMETER_DB_PASSWORD }}
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  run_once: True
  when:
    - inventory_hostname == "{{ groups['ceilometer_central_all'][0] }}"
    - secrets_result|changed and 'CEILOMETER_DB_PASSWORD' in secrets_result.stdout

- name: Write new password to engine
  environment:
    VAULT_ADDR: http://{{ build_node_ip | ipwrap }}:8200
  shell: vault kv put secret/cvim-secrets/CEILOMETER_KEYSTONE_PASSWORD value={{ CEILOMETER_KEYSTONE_PASSWORD }}
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  run_once: True
  when:
    - inventory_hostname == "{{ groups['ceilometer_central_all'][0] }}"
    - secrets_result|changed and 'CEILOMETER_KEYSTONE_PASSWORD' in secrets_result.stdout
