- name: Check if Ironic Nova Compute docker container is already running
  shell: docker ps | egrep ' ironic_novacompute_{{ docker.ironic_nova_compute.image_tag }}$' | cut -f1 -d " "
  register: command_result

- name: Add aliases to bashrc.
  lineinfile:
    dest: /root/.bashrc
    state: present
    regexp: "alias ironiccompute='in_container ironic_novacompute_"
    line: "{{ item }}"
  with_items:
    - alias ironiccompute='in_container ironic_novacompute_{{ docker.ironic_nova_compute.image_tag }}'

- name: Start the Ironic Nova Compute docker Service
  docker_container:
    name: "ironic_novacompute_{{ docker.ironic_nova_compute.image_tag }}"
    image: "{{ docker.common.registry }}/{{ docker.ironic_nova_compute.name }}:{{ docker.ironic_nova_compute.image_tag }}"
    cpuset_cpus: "{{ hostcpus }}"
    privileged: True
    volumes:
        - "{{ docker.ironic_nova_compute.host_data_dir }}:{{ docker.ironic_nova_compute.host_data_dir }}:ro,z"
        - /dev:/dev:z
        - /etc/iscsi/:/etc/iscsi/:z
        - /lib/modules:/lib/modules:ro,z
        - /var/run:/var/run:z
        - /etc/localtime:/etc/localtime:ro
        - /var/log/nova:/var/log/nova:z
    ports: "9292:9292, 5000:5000"
    interactive: yes
    timeout: "{{ DOCKER_API_TIMEOUT }}"
    network_mode: "host"
  when: command_result.stdout == ""

- pause: seconds=10 prompt="Waiting for sometime"

- name: Check if Ironic Nova Compute docker container has started running
  shell: docker ps | egrep ' ironic_novacompute_{{ docker.ironic_nova_compute.image_tag }}$' | cut -f1 -d " "
  register: command_result

- name: Fail if container is not UP.
  fail: msg="Ironic Nova Compute container does not seem to be running"
  when: command_result.stdout == ""

- name: Enable Docker Services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - docker-ironicnovacpu
  tags:
    - reboot-on-failure

- name: Reset systemctl failures
  shell: systemctl reset-failed
  when: ACTION is defined and ACTION == "update"

- set_fact:
    IRONIC_KEYSTONE_PASSWORD: '{{ lookup("hashi_vault", "secret=secret/data/cvim-secrets/IRONIC_KEYSTONE_PASSWORD:data
  token={{ TOKEN }} url=http://{{ build_node_ip | ipwrap }}:8200")["value"]}}'
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: VAULT is defined and VAULT.enabled == True

- name: Looking for the {{ IRONIC_HOST_AGGREGATE }} host aggregate
  command: >
           docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
           openstack
           --os-interface internal
           --os-auth-url {{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v{{ KEYSTONE_API_VERSION }}
           --os-identity-api-version {{ KEYSTONE_API_VERSION }}
           --os-user-domain-name default
           --os-project-domain-name default
           --os-username {{ IRONIC_KEYSTONE_USER }}
           --os-password {{ IRONIC_KEYSTONE_PASSWORD }}
           --os-project-name {{ SERVICE_TENANT_NAME }}
           aggregate show {{ IRONIC_HOST_AGGREGATE }} -f value -c id
  ignore_errors: True
  failed_when: False
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  delegate_to: localhost
  register: IRONIC_HOST_AGGREGATE_ID
  run_once: True

- name: Creating the {{ IRONIC_HOST_AGGREGATE }} host aggregate
  command: >
           docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
           openstack
           --os-interface internal
           --os-auth-url {{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v{{ KEYSTONE_API_VERSION }}
           --os-identity-api-version {{ KEYSTONE_API_VERSION }}
           --os-user-domain-name default
           --os-project-domain-name default
           --os-username {{ IRONIC_KEYSTONE_USER }}
           --os-password {{ IRONIC_KEYSTONE_PASSWORD }}
           --os-project-name {{ SERVICE_TENANT_NAME }}
           aggregate create {{ IRONIC_HOST_AGGREGATE }} --zone {{ IRONIC_AVAILABILITY_ZONE }} -f value -c id
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  delegate_to: localhost
  register: CREATED_IRONIC_HOST_AGGREGATE_ID
  when: "{{ IRONIC_HOST_AGGREGATE_ID.rc == 1}}"
  run_once: True

- set_fact:
    IRONIC_HOST_AGGREGATE_ID: "{{ CREATED_IRONIC_HOST_AGGREGATE_ID.stdout if CREATED_IRONIC_HOST_AGGREGATE_ID.changed and CREATED_IRONIC_HOST_AGGREGATE_ID.rc == 0 else IRONIC_HOST_AGGREGATE_ID.stdout if IRONIC_HOST_AGGREGATE_ID.rc == 0 else None }}"

- fail:
    msg: "{{ IRONIC_HOST_AGGREGATE }} host aggregate could not be created {{ CREATED_IRONIC_HOST_AGGREGATE_ID.stdout }} "
  when: "{{ not IRONIC_HOST_AGGREGATE_ID }}"

- name: Wait until compute service registers itself in database
  command: >
           docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
           openstack
           --os-interface internal
           --os-auth-url {{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v{{ KEYSTONE_API_VERSION }}
           --os-identity-api-version {{ KEYSTONE_API_VERSION }}
           --os-user-domain-name default
           --os-project-domain-name default
           --os-username {{ IRONIC_KEYSTONE_USER }}
           --os-password {{ IRONIC_KEYSTONE_PASSWORD }}
           --os-project-name {{ SERVICE_TENANT_NAME }}
           host list -f value -c 'Host Name'
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  delegate_to: localhost
  register: openstack_host_list
  until: "{{ 'ironic.' + ansible_hostname in openstack_host_list.stdout }}"
  retries: 30
  delay: 1

- name: Show {{ IRONIC_HOST_AGGREGATE }} host aggregate
  command: >
           docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
           openstack
           --os-interface internal
           --os-auth-url {{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v{{ KEYSTONE_API_VERSION }}
           --os-identity-api-version {{ KEYSTONE_API_VERSION }}
           --os-user-domain-name default
           --os-project-domain-name default
           --os-username {{ IRONIC_KEYSTONE_USER }}
           --os-password {{ IRONIC_KEYSTONE_PASSWORD }}
           --os-project-name {{ SERVICE_TENANT_NAME }}
           aggregate show {{ IRONIC_HOST_AGGREGATE }} -f value -c hosts
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  delegate_to: localhost
  register: IRONIC_HOST_AGGREGATE_HOSTS

- name: Add ironic compute to the {{ IRONIC_HOST_AGGREGATE }} host aggregate
  command: >
           docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
           openstack
           --os-interface internal
           --os-auth-url {{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v{{ KEYSTONE_API_VERSION }}
           --os-identity-api-version {{ KEYSTONE_API_VERSION }}
           --os-user-domain-name default
           --os-project-domain-name default
           --os-username {{ IRONIC_KEYSTONE_USER }}
           --os-password {{ IRONIC_KEYSTONE_PASSWORD }}
           --os-project-name {{ SERVICE_TENANT_NAME }}
           aggregate add host {{ IRONIC_HOST_AGGREGATE_ID }} ironic.{{ ansible_hostname }}
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  delegate_to: localhost
  when: "{{ \"u'ironic.\" + ansible_hostname + \"'\" not in IRONIC_HOST_AGGREGATE_HOSTS.stdout }}"
