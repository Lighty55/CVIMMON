- name: Checking cinder internal tenant
  environment:
    OS_AUTH_URL: "{{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v3"
    OS_USERNAME: "{{ ADMIN_USER }}"
    OS_PASSWORD: "{{ ADMIN_USER_PASSWORD }}"
    OS_TENANT_NAME: "{{ ADMIN_TENANT_NAME }}"
    OS_REGION_NAME: "RegionOne"
    OS_PROJECT_NAME: "{{ ADMIN_TENANT_NAME }}"
    OS_PROJECT_DOMAIN_NAME: "default"
    OS_USER_DOMAIN_NAME: "default"
    OS_IDENTITY_API_VERSION: 3
  shell: openstack project list | grep -w "cinder-internal"| awk '{ print $2}'
  register: tenant
  run_once: true
  delegate_to: 127.0.0.1

- name: Checking cinder internal user
  environment:
    OS_AUTH_URL: "{{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v3"
    OS_USERNAME: "{{ ADMIN_USER }}"
    OS_PASSWORD: "{{ ADMIN_USER_PASSWORD }}"
    OS_TENANT_NAME: "{{ ADMIN_TENANT_NAME }}"
    OS_REGION_NAME: "RegionOne"
    OS_PROJECT_NAME: "{{ ADMIN_TENANT_NAME }}"
    OS_PROJECT_DOMAIN_NAME: "default"
    OS_USER_DOMAIN_NAME: "default"
    OS_IDENTITY_API_VERSION: 3
  shell: openstack user list | grep -w "cinder-internal"| awk '{ print $2}'
  register: user
  run_once: true
  delegate_to: 127.0.0.1

- name: add tenant/user UUID cinder
  set_fact:
    tenant_uuid: "{{ tenant.stdout }}"
    user_uuid: "{{ user.stdout }}"

- name: Check if Cinder Backup Service container has been installed
  shell: docker ps -a | grep cinderbackup_{{ docker.cinder_backup.image_tag }} | cut -f1 -d " "
  register: cinderbackup_output

- name: Perform deploy if cinder backup is not installed
  include: deploy.yaml
  when: cinderbackup_output.stdout is none or cinderbackup_output.stdout|trim == ''

- name: Perform reconfiguration if cinder backup is installed
  include: reconifgure_cinderbackup.yaml
  when: cinderbackup_output.stdout is not none and cinderbackup_output.stdout|trim|length > 0
