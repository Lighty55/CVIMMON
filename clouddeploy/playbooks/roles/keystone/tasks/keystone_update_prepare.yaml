##############################################
# Create the backup staging folder for old volume
##############################################
- name: Update | Create Keystone Docker staging folder.
  file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  with_items:
    - /docker/keystone_{{ KEYSTONE_PREVIOUS_TAG }}

# Get the fernet keys from the container to back them up in the host,
# so that they can be used by the new keystone container when it comes up
- name: Update | Get the list of fernet keys that need to be copied from the container
  shell: >
    docker exec keystone_{{ KEYSTONE_PREVIOUS_TAG }} \
           bash -c "cd {{ KEYSTONE_FERNET_KEYS_REPO }} && ls"
  register: _list_fernet_keys
  failed_when: _list_fernet_keys == ""
  any_errors_fatal: true

- name: Update | Get the fernet keys from each keystone container to its own controller node
  shell: >
    docker cp keystone_{{ KEYSTONE_PREVIOUS_TAG }}:{{ KEYSTONE_FERNET_KEYS_REPO }}/{{ item }} \
           {{ docker.keystone.host_data_dir }}/fernet-key_{{ item }}
  with_items: "{{ _list_fernet_keys.stdout_lines | default([]) }}"

- name: Update | Change the permissions of the fernet keys so that keystone container can copy them later
  file:
    path:  "{{ docker.keystone.host_data_dir }}/fernet-key_{{ item }}"
    state: touch
    mode:  "u=rw,g=r,o=r"
  with_items: "{{ _list_fernet_keys.stdout_lines | default([]) }}"

# Backup all files in /docker/keystone. These include keystone fernet-keys, config and systemd files
# NOTE: Have to use the raw rsync command instead of synchronize module due to
#       inventory host is in IPv4 and if ansible_host is in IPv6, this will
#       cause the module to perform over network even though the sync is on
#       same host.
- name: Update | Backup files from /docker/keystone into /docker/keystone_{{ KEYSTONE_PREVOUS_TAG }}
  command: rsync --archive --copy-links "{{ docker.keystone.host_data_dir }}/" "{{ docker.keystone.host_data_dir }}_{{ KEYSTONE_PREVIOUS_TAG }}"

- name: Check that "{{ KEYSTONE_FERNET_ROTATION_DIR }}" exists
  stat: path="{{ KEYSTONE_FERNET_ROTATION_DIR }}"
  register: _rotation_dir

- name: Update | Backup auto rotation fernet keys script
  command: >
    mv "{{ KEYSTONE_FERNET_ROTATION_DIR }}" "{{ KEYSTONE_FERNET_ROTATION_DIR }}_{{ KEYSTONE_PREVIOUS_TAG }}"
  run_once: true
  delegate_to: 127.0.0.1
  when: (inventory_hostname == "{{ groups['keystone_all'][0] }}") and
        (_rotation_dir.stat.isdir is defined) and _rotation_dir.stat.isdir and
        (KEYSTONE_FERNET_CRONJOB == "Enabled")

- name: Update | Remove autorotate rotation fernet keys script
  cron:
    name: "Fernet keys rotation job"
    job: "{{ KEYSTONE_FERNET_ROTATION_DIR }}/{{ KEYSTONE_FERNET_ROTATION_SCRIPT }}"
    state: absent
  run_once: true
  delegate_to: 127.0.0.1
  when: (inventory_hostname == "{{ groups['keystone_all'][0] }}")

#####################################################
# Shut down the old keystone containers
####################################################
- name: Update | Shut off keystone docker service
  service:
    name: docker-keystone
    enabled: no
    state: stopped

- name: Update | Remove keystone service file
  file:
    path: "/usr/lib/systemd/system/docker-keystone.service"
    state: absent

- name: Update | Systemctl daemon-reload.
  command: /usr/bin/systemctl daemon-reload

- name: Update | Get files in /docker/keystone directory
  command: ls {{ docker.keystone.host_data_dir }}
  register: _list_files

# Now remove only the contents of the old volume since we'll reuse it for the
# new container
- name: Update | Remove contents of the keystone directory
  file: path="{{ docker.keystone.host_data_dir }}"/{{ item }} state=absent
  with_items: "{{ _list_files | difference(_list_fernet_keys) }}"

# Stop and remove the fernet cronjob
- name: Update | Remove Fernet keys rotation cron job
  cron:
    name: "Fernet keys rotation job"
    job: "{{ KEYSTONE_FERNET_ROTATION_DIR }}/{{ KEYSTONE_FERNET_ROTATION_SCRIPT }}"
    state: absent
  run_once: true
  delegate_to: 127.0.0.1
  when: (inventory_hostname == "{{ groups['keystone_all'][0] }}") and (KEYSTONE_FERNET_CRONJOB == "Enabled")
