- name: Check if Nova API Docker container is already running
  shell: docker ps -a | grep Up | grep novaapi_{{ docker.nova_api.image_tag }} | cut -f1 -d " "
  register: command_result

- name: Add aliases to bashrc.
  lineinfile:
    dest: /root/.bashrc
    state: present
    regexp: "alias novaapi='in_container novaapi_"
    line: "{{ item }}"
  with_items:
    - alias novaapi='in_container novaapi_{{ docker.nova_api.image_tag }}'

- name: Start the Nova api Docker Service
  docker_container:
    name: "novaapi_{{ docker.nova_api.image_tag }}"
    privileged: True
    image: "{{ docker.common.registry }}/{{ docker.nova_api.name }}:{{ docker.nova_api.image_tag }}"
    cpuset_cpus: "{{ hostcpus }}"
    volumes:
      -  "{{ docker.nova_api.host_data_dir }}:{{ docker.nova_api.host_data_dir }}:ro,z"
      - /etc/localtime:/etc/localtime:ro
      - /var/log/nova:/var/log/nova:z
    volumes_from:
      - novacommon_{{ docker.nova_common.image_tag }}
    ports: "9292:9292, 5000:5000, 8774:8774, 8773:8773, 9696:9696"
    interactive: yes
    timeout: "{{ DOCKER_API_TIMEOUT }}"
    network_mode: "host"
  when: (command_result.stdout == "" and ACTION is undefined) or (command_result.stdout == "" and ACTION is defined and ACTION == "update") or (command_result.stdout == "" and ACTION is defined and ACTION == "upgrade")

- name: Wait for Nova api to be alive
  wait_for: host={{ NOVA_HOST }} port={{ NOVA_API_PORT }}

- name: Enable Docker Services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - docker-novaapi
  tags:
    - reboot-on-failure
