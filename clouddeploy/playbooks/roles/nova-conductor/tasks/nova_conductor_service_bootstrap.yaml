- name: Check if Nova Conductor Docker container is already running
  shell: docker ps -a | grep Up | grep novaconduct_{{ docker.nova_conductor.image_tag }} | cut -f1 -d " "
  register: command_result

- set_fact:
    DB_ROOT_PASSWORD: '{{ lookup("hashi_vault", "secret=secret/data/cvim-secrets/DB_ROOT_PASSWORD:data
  token={{ TOKEN }} url=http://{{ build_node_ip | ipwrap }}:8200")["value"]}}'
    ADMIN_USER_PASSWORD: '{{ lookup("hashi_vault", "secret=secret/data/cvim-secrets/ADMIN_USER_PASSWORD:data
  token={{ TOKEN }} url=http://{{ build_node_ip | ipwrap }}:8200")["value"]}}'
    NOVA_DB_PASSWORD: '{{ lookup("hashi_vault", "secret=secret/data/cvim-secrets/NOVA_DB_PASSWORD:data
  token={{ TOKEN }} url=http://{{ build_node_ip | ipwrap }}:8200")["value"]}}'
    NOVA_KEYSTONE_PASSWORD: '{{ lookup("hashi_vault", "secret=secret/data/cvim-secrets/NOVA_KEYSTONE_PASSWORD:data
  token={{ TOKEN }} url=http://{{ build_node_ip | ipwrap }}:8200")["value"]}}'
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: VAULT is defined and VAULT.enabled == True

- name: Setting up nova database
  shell: >
          docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
          bash -c
          "export TERM=xterm; mysql -h {{ MARIADB_SERVICE_HOST }}
          -u root -p{{ DB_ROOT_PASSWORD }} mysql -e
          \"CREATE DATABASE IF NOT EXISTS {{ NOVA_DB_NAME }} DEFAULT CHARACTER SET utf8;
          SET GLOBAL wsrep_debug = 'OFF';
          GRANT ALL PRIVILEGES ON {{ NOVA_DB_NAME }}.* TO '{{ NOVA_DB_USER }}'@'%' IDENTIFIED BY '{{ NOVA_DB_PASSWORD }}';
          SET GLOBAL wsrep_debug = 'ON';
          FLUSH PRIVILEGES\""
  run_once: True
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: command_result.stdout == ""

- name: Setting up nova api database
  shell: >
          docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
          bash -c
          "export TERM=xterm; mysql -h {{ MARIADB_SERVICE_HOST }}
          -u root -p{{ DB_ROOT_PASSWORD }} mysql -e
          \"CREATE DATABASE IF NOT EXISTS {{ NOVA_API_DB_NAME }} DEFAULT CHARACTER SET utf8;
          SET GLOBAL wsrep_debug = 'OFF';
          GRANT ALL PRIVILEGES ON {{ NOVA_API_DB_NAME }}.* TO '{{ NOVA_DB_USER }}'@'%' IDENTIFIED BY '{{ NOVA_DB_PASSWORD }}';
          SET GLOBAL wsrep_debug = 'ON';
          FLUSH PRIVILEGES\""
  run_once: True
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: command_result.stdout == ""

- name: Setting up nova cells database
  shell: >
          docker  exec -t vimconfig_{{ docker.vimconfig.image_tag }}
          bash -c
          "export TERM=xterm; mysql -h {{ MARIADB_SERVICE_HOST }}
          -u root -p{{ DB_ROOT_PASSWORD }} mysql -e
          \"CREATE DATABASE IF NOT EXISTS {{ NOVA_CELL_DB_NAME }} DEFAULT CHARACTER SET utf8;
          SET GLOBAL wsrep_debug = 'OFF';
          GRANT ALL PRIVILEGES ON {{ NOVA_CELL_DB_NAME }}.* TO '{{ NOVA_DB_USER }}'@'%' IDENTIFIED BY '{{ NOVA_DB_PASSWORD }}';
          SET GLOBAL wsrep_debug = 'ON';
          FLUSH PRIVILEGES\""
  run_once: True
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: command_result.stdout == ""


- name: Creating the nova user
  command: >
           docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
           /usr/bin/ansible localhost -m vim_keystone -a
           "action=user_create
           os_auth_url={{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v{{ KEYSTONE_API_VERSION }}
           os_username={{ ADMIN_USER }}
           os_password={{ ADMIN_USER_PASSWORD }}
           os_tenant_name={{ ADMIN_TENANT_NAME }}
           username={{ NOVA_KEYSTONE_USER }}
           password={{ NOVA_KEYSTONE_PASSWORD }}
           project={{ SERVICE_TENANT_NAME }}
           role=admin"
  run_once: True
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: command_result.stdout == ""

- name: Creating the nova placement user
  command: >
           docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
           /usr/bin/ansible localhost -m vim_keystone -a
           "action=user_create
           os_auth_url={{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v{{ KEYSTONE_API_VERSION }}
           os_username={{ ADMIN_USER }}
           os_password={{ ADMIN_USER_PASSWORD }}
           os_tenant_name={{ ADMIN_TENANT_NAME }}
           username={{ NOVA_PLACEMENT_USER }}
           password={{ NOVA_KEYSTONE_PASSWORD }}
           project={{ SERVICE_TENANT_NAME }}
           role=admin"
  run_once: True
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: command_result.stdout == ""


- name: Creating the nova service
  command: >
           docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
           /usr/bin/ansible localhost -m vim_keystone -a
           "action=service_create
           os_auth_url={{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v{{ KEYSTONE_API_VERSION }}
           os_username={{ ADMIN_USER }}
           os_password={{ ADMIN_USER_PASSWORD }}
           os_tenant_name={{ ADMIN_TENANT_NAME }}
           service_name=nova
           service_type=compute
           service_description=compute"
  run_once: True
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: command_result.stdout == ""

- name: Creating the nova placement service
  command: >
           docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
           /usr/bin/ansible localhost -m vim_keystone -a
           "action=service_create
           os_auth_url={{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v{{ KEYSTONE_API_VERSION }}
           os_username={{ ADMIN_USER }}
           os_password={{ ADMIN_USER_PASSWORD }}
           os_tenant_name={{ ADMIN_TENANT_NAME }}
           service_name=placement
           service_type=placement
           service_description=placement"
  run_once: True
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: command_result.stdout == ""

- name: Creating the nova endpoints
  command: >
           docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
           /usr/bin/ansible localhost -m vim_keystone -a
           "action=endpoint_create
           os_auth_url={{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v{{ KEYSTONE_API_VERSION }}
           os_username={{ ADMIN_USER }}
           os_password={{ ADMIN_USER_PASSWORD }}
           os_tenant_name={{ ADMIN_TENANT_NAME }}
           service_name=nova
           endpoint_region=RegionOne
           endpoint_internal={{ INTERNAL_PROTOCOL }}://{{ NOVA_API_SERVICE_HOST }}:8774/v2.1/%(tenant_id)s
           endpoint_admin={{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:8774/v2.1/%(tenant_id)s
           endpoint_public={{ PUBLIC_PROTOCOL }}://{{ KEYSTONE_PUBLIC_SERVICE_HOST }}:8774/v2.1/%(tenant_id)s"
  run_once: True
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: command_result.stdout == ""

- name: Creating the nova placement endpoints
  command: >
           docker exec -t vimconfig_{{ docker.vimconfig.image_tag }}
           /usr/bin/ansible localhost -m vim_keystone -a
           "action=endpoint_create
           os_auth_url={{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v{{ KEYSTONE_API_VERSION }}
           os_username={{ ADMIN_USER }}
           os_password={{ ADMIN_USER_PASSWORD }}
           os_tenant_name={{ ADMIN_TENANT_NAME }}
           service_name=placement
           endpoint_region=RegionOne
           endpoint_internal={{ INTERNAL_PROTOCOL }}://{{ NOVA_API_SERVICE_HOST }}:8778
           endpoint_admin={{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:8778
           endpoint_public={{ PUBLIC_PROTOCOL }}://{{ KEYSTONE_PUBLIC_SERVICE_HOST }}:8778"
  run_once: True
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: command_result.stdout == ""

- name: Generate a token
  environment:
    OS_AUTH_URL: "{{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v3"
    OS_USERNAME: "{{ ADMIN_USER }}"
    OS_PASSWORD: "{{ ADMIN_USER_PASSWORD }}"
    OS_TENANT_NAME: "{{ ADMIN_TENANT_NAME }}"
    OS_REGION_NAME: "RegionOne"
    OS_PROJECT_NAME: "{{ ADMIN_TENANT_NAME }}"
    OS_PROJECT_DOMAIN_NAME: "default"
    OS_USER_DOMAIN_NAME: "default"
    OS_IDENTITY_API_VERSION: 3
  shell: openstack token issue -f value -c id
  register: token
  run_once: True
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: command_result.stdout == ""

- name: Find nova user
  environment:
    OS_AUTH_URL: "{{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v3"
    OS_USERNAME: "{{ ADMIN_USER }}"
    OS_PASSWORD: "{{ ADMIN_USER_PASSWORD }}"
    OS_TENANT_NAME: "{{ ADMIN_TENANT_NAME }}"
    OS_REGION_NAME: "RegionOne"
    OS_PROJECT_NAME: "{{ ADMIN_TENANT_NAME }}"
    OS_PROJECT_DOMAIN_NAME: "default"
    OS_USER_DOMAIN_NAME: "default"
    OS_IDENTITY_API_VERSION: 3
  shell: openstack user list | grep -w " {{ NOVA_KEYSTONE_USER }} " | awk '{print $2}'
  register: user
  run_once: True
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: command_result.stdout == ""

- name: Ignore lockout for service accounts
  uri:
    method: PATCH
    url: "{{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v3/users/{{ user.stdout }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token.stdout }}"
    body: '{"user": {"options": {
            "ignore_lockout_failure_attempts": true,
            "ignore_change_password_upon_first_use": true,
            "ignore_password_expiry": true
            }}}'
  run_once: True
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: command_result.stdout == ""

- name: Find nova placement user
  environment:
    OS_AUTH_URL: "{{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v3"
    OS_USERNAME: "{{ ADMIN_USER }}"
    OS_PASSWORD: "{{ ADMIN_USER_PASSWORD }}"
    OS_TENANT_NAME: "{{ ADMIN_TENANT_NAME }}"
    OS_REGION_NAME: "RegionOne"
    OS_PROJECT_NAME: "{{ ADMIN_TENANT_NAME }}"
    OS_PROJECT_DOMAIN_NAME: "default"
    OS_USER_DOMAIN_NAME: "default"
    OS_IDENTITY_API_VERSION: 3
  shell: openstack user list | grep -w " {{ NOVA_PLACEMENT_USER }} " | awk '{print $2}'
  register: user
  run_once: True
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: command_result.stdout == ""

- name: Ignore lockout for service accounts
  uri:
    method: PATCH
    url: "{{ INTERNAL_PROTOCOL }}://{{ KEYSTONE_ADMIN_SERVICE_HOST }}:{{ KEYSTONE_ADMIN_SERVICE_PORT }}/v3/users/{{ user.stdout }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token.stdout }}"
    body: '{"user": {"options": {
            "ignore_lockout_failure_attempts": true,
            "ignore_change_password_upon_first_use": true,
            "ignore_password_expiry": true
            }}}'
  run_once: True
  delegate_to: localhost
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: command_result.stdout == ""

- name: Bootstrap the Nova Service
  docker_container:
    name: "novaconduct_bootstrap"
    image: "{{ docker.common.registry }}/{{ docker.nova_conductor.name }}:{{ docker.nova_conductor.image_tag }}"
    volumes:
      -  "{{ docker.nova_conductor.host_data_dir }}:{{ docker.nova_conductor.host_data_dir }}:ro,z"
      - /etc/localtime:/etc/localtime:ro
      - /var/log/nova:/var/log/nova:z
    volumes_from:
      - novacommon_{{ docker.nova_common.image_tag }}
    ports: "9292:9292, 5000:5000"
    interactive: yes
    timeout: "{{ DOCKER_API_TIMEOUT }}"
    network_mode: "host"
    env:
        BOOTSTRAP:
  run_once: True
  no_log: "{{ ANSIBLE_SAFE_LOG_OVERRIDE|default(True) }}"
  when: command_result.stdout == ""

- name: Waiting for nova bootstrap container to exit
  command: docker wait novaconduct_bootstrap
  failed_when: bootstrap_result.stdout != "0"
  register: bootstrap_result
  run_once: True
  when: command_result.stdout == ""

- name: Cleaning up nova bootstrap container
  docker_container:
    name: novaconduct_bootstrap
    image: "{{ docker.common.registry }}/{{ docker.nova_conductor.name }}:{{ docker.nova_conductor.image_tag }}"
    state: absent
    timeout: "{{ DOCKER_API_TIMEOUT }}"
  run_once: True
  when: command_result.stdout == ""
