# First remove the new container and artifacts
- name: Shut off neutron sriov docker service
  service:
    name: docker-neutron_sriov
    enabled: no
    state: stopped
  ignore_errors: true
  failed_when: false

- name: Remove neutron sriov service file
  file:
    path: "/usr/lib/systemd/system/docker-neutron_sriov.service"
    state: absent

- name: Systemctl daemon-reload.
  command: /usr/bin/systemctl daemon-reload

- name: Stop and remove neutron sriov docker container.
  docker_container:
    image: "{{ item.image }}"
    name: "{{ item.name }}"
    state: absent
    timeout: "{{ DOCKER_API_TIMEOUT }}"
  with_items:
    - { image: "", name: "neutron_sriov_{{ docker.neutron_sriov.image_tag }}" }

- name: Remove neutron sriov docker image
  docker_image:
    name: "{{ docker.common.registry }}/{{ docker.neutron_sriov.name }}"
    tag: "{{ docker.neutron_sriov.image_tag }}"
    state: absent
    timeout: "{{ DOCKER_API_TIMEOUT }}"

# Now list and remove neutron sriov volume contents
- name: List neutron sriov volume contents
  shell: ls -A1 /docker/neutron_sriov/
  register: contents

- name: Remove neutron sriov volume contents
  file:
    path: /docker/neutron_sriov/{{ item }}
    state: absent
  with_items: "{{ contents.stdout_lines }}"

#  Recover the neutron sriov volume contents
- name: recover neutron sriov volume contents
  shell: cp /docker/neutron_sriov_{{ SRIOV_PREVIOUS_TAG }}/* /docker/neutron_sriov/.


# Now remove the backup volume
- name: Remove back up neutron sriov Directory
  file:
    path: "/docker/neutron_sriov_{{ SRIOV_PREVIOUS_TAG }}"
    state: absent

- name: Copy Containers restart-on-boot files.
  command: cp /docker/neutron_sriov/docker-neutron_sriov.service /usr/lib/systemd/system/docker-neutron_sriov.service

- name: Systemctl daemon-reload.
  command: /usr/bin/systemctl daemon-reload

- name: Reset the failures
  shell: systemctl reset-failed

- name: Add aliases to bashrc.
  lineinfile:
    dest: /root/.bashrc
    state: present
    regexp: "alias sriovagent='in_container neutron_sriov_"
    line: "{{ item }}"
  with_items:
    - alias sriovagent='in_container neutron_sriov_{{ SRIOV_PREVIOUS_TAG }}'

- name: Start Neutron sriov container
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - docker-neutron_sriov
  tags:
    - reboot-on-failure

- pause: seconds=5 prompt="Waiting for sometime"

- name: Check if neutron sriov  Docker container has started running
  shell: docker ps -a | grep Up | grep neutron_sriov_{{ SRIOV_PREVIOUS_TAG }} | cut -f1 -d " "
  register: command_result

- name: Fail if container is not UP.
  fail: msg="neutron sriov Container does not seem to be running"
  when: command_result.stdout == ""


